# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ProfitLossRequestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_date': 'str',
        'months': 'str',
        'fy': 'str',
        'segment': 'str',
        'to_date': 'str',
        'days': 'str'
    }

    attribute_map = {
        'from_date': 'fromDate',
        'months': 'months',
        'fy': 'fy',
        'segment': 'segment',
        'to_date': 'toDate',
        'days': 'days'
    }

    def __init__(self, from_date=None, months=None, fy=None, segment=None, to_date=None, days=None):  # noqa: E501
        """ProfitLossRequestData - a model defined in Swagger"""  # noqa: E501
        self._from_date = None
        self._months = None
        self._fy = None
        self._segment = None
        self._to_date = None
        self._days = None
        self.discriminator = None
        if from_date is not None:
            self.from_date = from_date
        if months is not None:
            self.months = months
        if fy is not None:
            self.fy = fy
        if segment is not None:
            self.segment = segment
        if to_date is not None:
            self.to_date = to_date
        if days is not None:
            self.days = days

    @property
    def from_date(self):
        """Gets the from_date of this ProfitLossRequestData.  # noqa: E501


        :return: The from_date of this ProfitLossRequestData.  # noqa: E501
        :rtype: str
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this ProfitLossRequestData.


        :param from_date: The from_date of this ProfitLossRequestData.  # noqa: E501
        :type: str
        """

        self._from_date = from_date

    @property
    def months(self):
        """Gets the months of this ProfitLossRequestData.  # noqa: E501


        :return: The months of this ProfitLossRequestData.  # noqa: E501
        :rtype: str
        """
        return self._months

    @months.setter
    def months(self, months):
        """Sets the months of this ProfitLossRequestData.


        :param months: The months of this ProfitLossRequestData.  # noqa: E501
        :type: str
        """

        self._months = months

    @property
    def fy(self):
        """Gets the fy of this ProfitLossRequestData.  # noqa: E501


        :return: The fy of this ProfitLossRequestData.  # noqa: E501
        :rtype: str
        """
        return self._fy

    @fy.setter
    def fy(self, fy):
        """Sets the fy of this ProfitLossRequestData.


        :param fy: The fy of this ProfitLossRequestData.  # noqa: E501
        :type: str
        """

        self._fy = fy

    @property
    def segment(self):
        """Gets the segment of this ProfitLossRequestData.  # noqa: E501


        :return: The segment of this ProfitLossRequestData.  # noqa: E501
        :rtype: str
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this ProfitLossRequestData.


        :param segment: The segment of this ProfitLossRequestData.  # noqa: E501
        :type: str
        """

        self._segment = segment

    @property
    def to_date(self):
        """Gets the to_date of this ProfitLossRequestData.  # noqa: E501


        :return: The to_date of this ProfitLossRequestData.  # noqa: E501
        :rtype: str
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this ProfitLossRequestData.


        :param to_date: The to_date of this ProfitLossRequestData.  # noqa: E501
        :type: str
        """

        self._to_date = to_date

    @property
    def days(self):
        """Gets the days of this ProfitLossRequestData.  # noqa: E501


        :return: The days of this ProfitLossRequestData.  # noqa: E501
        :rtype: str
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this ProfitLossRequestData.


        :param days: The days of this ProfitLossRequestData.  # noqa: E501
        :type: str
        """

        self._days = days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfitLossRequestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfitLossRequestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
