# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PlReportItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'Symbol',
        'client_name': 'str',
        'buy_date': 'str',
        'expiry_date': 'str',
        'intra_day_pl': 'str',
        'open_cost': 'str',
        'sell_value': 'str',
        'scrip_code': 'str',
        'buy_value': 'str',
        'buy_rate': 'str',
        'scrip_name': 'str',
        'open_rate': 'str',
        'realised_pl_futures': 'str',
        'long_term_pl': 'str',
        'call_put': 'str',
        'realised_pl_total': 'str',
        'unrealised_pl_options': 'str',
        'realised_pl_options': 'str',
        'unrealised_pl_futures': 'str',
        'segment_name': 'str',
        'sell_qty': 'str',
        'sell_rate': 'str',
        'buy_qty': 'str',
        'product_code': 'str',
        'product_type_short': 'str',
        'client_code': 'str',
        'short_term_pl': 'str',
        'open_qty': 'str',
        'sell_date': 'str',
        'unrealised_pl_total': 'str',
        'open_date': 'str',
        'strike_price': 'str',
        'isin': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'client_name': 'clientName',
        'buy_date': 'buyDate',
        'expiry_date': 'expiryDate',
        'intra_day_pl': 'intraDayPL',
        'open_cost': 'openCost',
        'sell_value': 'sellValue',
        'scrip_code': 'scripCode',
        'buy_value': 'buyValue',
        'buy_rate': 'buyRate',
        'scrip_name': 'scripName',
        'open_rate': 'openRate',
        'realised_pl_futures': 'realisedPLFutures',
        'long_term_pl': 'longTermPL',
        'call_put': 'callPut',
        'realised_pl_total': 'realisedPLTotal',
        'unrealised_pl_options': 'unrealisedPLOptions',
        'realised_pl_options': 'realisedPLOptions',
        'unrealised_pl_futures': 'unrealisedPLFutures',
        'segment_name': 'segmentName',
        'sell_qty': 'sellQty',
        'sell_rate': 'sellRate',
        'buy_qty': 'buyQty',
        'product_code': 'productCode',
        'product_type_short': 'productTypeShort',
        'client_code': 'clientCode',
        'short_term_pl': 'shortTermPL',
        'open_qty': 'openQty',
        'sell_date': 'sellDate',
        'unrealised_pl_total': 'unrealisedPLTotal',
        'open_date': 'openDate',
        'strike_price': 'strikePrice',
        'isin': 'isin'
    }

    def __init__(self, symbol=None, client_name=None, buy_date=None, expiry_date=None, intra_day_pl=None,
                 open_cost=None, sell_value=None, scrip_code=None, buy_value=None, buy_rate=None, scrip_name=None,
                 open_rate=None, realised_pl_futures=None, long_term_pl=None, call_put=None, realised_pl_total=None,
                 unrealised_pl_options=None, realised_pl_options=None, unrealised_pl_futures=None, segment_name=None,
                 sell_qty=None, sell_rate=None, buy_qty=None, product_code=None, product_type_short=None,
                 client_code=None, short_term_pl=None, open_qty=None, sell_date=None, unrealised_pl_total=None,
                 open_date=None, strike_price=None, isin=None):  # noqa: E501
        """PlReportItem - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._client_name = None
        self._buy_date = None
        self._expiry_date = None
        self._intra_day_pl = None
        self._open_cost = None
        self._sell_value = None
        self._scrip_code = None
        self._buy_value = None
        self._buy_rate = None
        self._scrip_name = None
        self._open_rate = None
        self._realised_pl_futures = None
        self._long_term_pl = None
        self._call_put = None
        self._realised_pl_total = None
        self._unrealised_pl_options = None
        self._realised_pl_options = None
        self._unrealised_pl_futures = None
        self._segment_name = None
        self._sell_qty = None
        self._sell_rate = None
        self._buy_qty = None
        self._product_code = None
        self._product_type_short = None
        self._client_code = None
        self._short_term_pl = None
        self._open_qty = None
        self._sell_date = None
        self._unrealised_pl_total = None
        self._open_date = None
        self._strike_price = None
        self._isin = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if client_name is not None:
            self.client_name = client_name
        if buy_date is not None:
            self.buy_date = buy_date
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if intra_day_pl is not None:
            self.intra_day_pl = intra_day_pl
        if open_cost is not None:
            self.open_cost = open_cost
        if sell_value is not None:
            self.sell_value = sell_value
        if scrip_code is not None:
            self.scrip_code = scrip_code
        if buy_value is not None:
            self.buy_value = buy_value
        if buy_rate is not None:
            self.buy_rate = buy_rate
        if scrip_name is not None:
            self.scrip_name = scrip_name
        if open_rate is not None:
            self.open_rate = open_rate
        if realised_pl_futures is not None:
            self.realised_pl_futures = realised_pl_futures
        if long_term_pl is not None:
            self.long_term_pl = long_term_pl
        if call_put is not None:
            self.call_put = call_put
        if realised_pl_total is not None:
            self.realised_pl_total = realised_pl_total
        if unrealised_pl_options is not None:
            self.unrealised_pl_options = unrealised_pl_options
        if realised_pl_options is not None:
            self.realised_pl_options = realised_pl_options
        if unrealised_pl_futures is not None:
            self.unrealised_pl_futures = unrealised_pl_futures
        if segment_name is not None:
            self.segment_name = segment_name
        if sell_qty is not None:
            self.sell_qty = sell_qty
        if sell_rate is not None:
            self.sell_rate = sell_rate
        if buy_qty is not None:
            self.buy_qty = buy_qty
        if product_code is not None:
            self.product_code = product_code
        if product_type_short is not None:
            self.product_type_short = product_type_short
        if client_code is not None:
            self.client_code = client_code
        if short_term_pl is not None:
            self.short_term_pl = short_term_pl
        if open_qty is not None:
            self.open_qty = open_qty
        if sell_date is not None:
            self.sell_date = sell_date
        if unrealised_pl_total is not None:
            self.unrealised_pl_total = unrealised_pl_total
        if open_date is not None:
            self.open_date = open_date
        if strike_price is not None:
            self.strike_price = strike_price
        if isin is not None:
            self.isin = isin

    @property
    def symbol(self):
        """Gets the symbol of this PlReportItem.  # noqa: E501


        :return: The symbol of this PlReportItem.  # noqa: E501
        :rtype: Symbol
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this PlReportItem.


        :param symbol: The symbol of this PlReportItem.  # noqa: E501
        :type: Symbol
        """

        self._symbol = symbol

    @property
    def client_name(self):
        """Gets the client_name of this PlReportItem.  # noqa: E501


        :return: The client_name of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this PlReportItem.


        :param client_name: The client_name of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def buy_date(self):
        """Gets the buy_date of this PlReportItem.  # noqa: E501


        :return: The buy_date of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._buy_date

    @buy_date.setter
    def buy_date(self, buy_date):
        """Sets the buy_date of this PlReportItem.


        :param buy_date: The buy_date of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._buy_date = buy_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this PlReportItem.  # noqa: E501


        :return: The expiry_date of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this PlReportItem.


        :param expiry_date: The expiry_date of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def intra_day_pl(self):
        """Gets the intra_day_pl of this PlReportItem.  # noqa: E501


        :return: The intra_day_pl of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._intra_day_pl

    @intra_day_pl.setter
    def intra_day_pl(self, intra_day_pl):
        """Sets the intra_day_pl of this PlReportItem.


        :param intra_day_pl: The intra_day_pl of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._intra_day_pl = intra_day_pl

    @property
    def open_cost(self):
        """Gets the open_cost of this PlReportItem.  # noqa: E501


        :return: The open_cost of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._open_cost

    @open_cost.setter
    def open_cost(self, open_cost):
        """Sets the open_cost of this PlReportItem.


        :param open_cost: The open_cost of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._open_cost = open_cost

    @property
    def sell_value(self):
        """Gets the sell_value of this PlReportItem.  # noqa: E501


        :return: The sell_value of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._sell_value

    @sell_value.setter
    def sell_value(self, sell_value):
        """Sets the sell_value of this PlReportItem.


        :param sell_value: The sell_value of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._sell_value = sell_value

    @property
    def scrip_code(self):
        """Gets the scrip_code of this PlReportItem.  # noqa: E501


        :return: The scrip_code of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._scrip_code

    @scrip_code.setter
    def scrip_code(self, scrip_code):
        """Sets the scrip_code of this PlReportItem.


        :param scrip_code: The scrip_code of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._scrip_code = scrip_code

    @property
    def buy_value(self):
        """Gets the buy_value of this PlReportItem.  # noqa: E501


        :return: The buy_value of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._buy_value

    @buy_value.setter
    def buy_value(self, buy_value):
        """Sets the buy_value of this PlReportItem.


        :param buy_value: The buy_value of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._buy_value = buy_value

    @property
    def buy_rate(self):
        """Gets the buy_rate of this PlReportItem.  # noqa: E501


        :return: The buy_rate of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._buy_rate

    @buy_rate.setter
    def buy_rate(self, buy_rate):
        """Sets the buy_rate of this PlReportItem.


        :param buy_rate: The buy_rate of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._buy_rate = buy_rate

    @property
    def scrip_name(self):
        """Gets the scrip_name of this PlReportItem.  # noqa: E501


        :return: The scrip_name of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._scrip_name

    @scrip_name.setter
    def scrip_name(self, scrip_name):
        """Sets the scrip_name of this PlReportItem.


        :param scrip_name: The scrip_name of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._scrip_name = scrip_name

    @property
    def open_rate(self):
        """Gets the open_rate of this PlReportItem.  # noqa: E501


        :return: The open_rate of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._open_rate

    @open_rate.setter
    def open_rate(self, open_rate):
        """Sets the open_rate of this PlReportItem.


        :param open_rate: The open_rate of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._open_rate = open_rate

    @property
    def realised_pl_futures(self):
        """Gets the realised_pl_futures of this PlReportItem.  # noqa: E501


        :return: The realised_pl_futures of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._realised_pl_futures

    @realised_pl_futures.setter
    def realised_pl_futures(self, realised_pl_futures):
        """Sets the realised_pl_futures of this PlReportItem.


        :param realised_pl_futures: The realised_pl_futures of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._realised_pl_futures = realised_pl_futures

    @property
    def long_term_pl(self):
        """Gets the long_term_pl of this PlReportItem.  # noqa: E501


        :return: The long_term_pl of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._long_term_pl

    @long_term_pl.setter
    def long_term_pl(self, long_term_pl):
        """Sets the long_term_pl of this PlReportItem.


        :param long_term_pl: The long_term_pl of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._long_term_pl = long_term_pl

    @property
    def call_put(self):
        """Gets the call_put of this PlReportItem.  # noqa: E501


        :return: The call_put of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._call_put

    @call_put.setter
    def call_put(self, call_put):
        """Sets the call_put of this PlReportItem.


        :param call_put: The call_put of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._call_put = call_put

    @property
    def realised_pl_total(self):
        """Gets the realised_pl_total of this PlReportItem.  # noqa: E501


        :return: The realised_pl_total of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._realised_pl_total

    @realised_pl_total.setter
    def realised_pl_total(self, realised_pl_total):
        """Sets the realised_pl_total of this PlReportItem.


        :param realised_pl_total: The realised_pl_total of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._realised_pl_total = realised_pl_total

    @property
    def unrealised_pl_options(self):
        """Gets the unrealised_pl_options of this PlReportItem.  # noqa: E501


        :return: The unrealised_pl_options of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._unrealised_pl_options

    @unrealised_pl_options.setter
    def unrealised_pl_options(self, unrealised_pl_options):
        """Sets the unrealised_pl_options of this PlReportItem.


        :param unrealised_pl_options: The unrealised_pl_options of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._unrealised_pl_options = unrealised_pl_options

    @property
    def realised_pl_options(self):
        """Gets the realised_pl_options of this PlReportItem.  # noqa: E501


        :return: The realised_pl_options of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._realised_pl_options

    @realised_pl_options.setter
    def realised_pl_options(self, realised_pl_options):
        """Sets the realised_pl_options of this PlReportItem.


        :param realised_pl_options: The realised_pl_options of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._realised_pl_options = realised_pl_options

    @property
    def unrealised_pl_futures(self):
        """Gets the unrealised_pl_futures of this PlReportItem.  # noqa: E501


        :return: The unrealised_pl_futures of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._unrealised_pl_futures

    @unrealised_pl_futures.setter
    def unrealised_pl_futures(self, unrealised_pl_futures):
        """Sets the unrealised_pl_futures of this PlReportItem.


        :param unrealised_pl_futures: The unrealised_pl_futures of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._unrealised_pl_futures = unrealised_pl_futures

    @property
    def segment_name(self):
        """Gets the segment_name of this PlReportItem.  # noqa: E501


        :return: The segment_name of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._segment_name

    @segment_name.setter
    def segment_name(self, segment_name):
        """Sets the segment_name of this PlReportItem.


        :param segment_name: The segment_name of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._segment_name = segment_name

    @property
    def sell_qty(self):
        """Gets the sell_qty of this PlReportItem.  # noqa: E501


        :return: The sell_qty of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._sell_qty

    @sell_qty.setter
    def sell_qty(self, sell_qty):
        """Sets the sell_qty of this PlReportItem.


        :param sell_qty: The sell_qty of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._sell_qty = sell_qty

    @property
    def sell_rate(self):
        """Gets the sell_rate of this PlReportItem.  # noqa: E501


        :return: The sell_rate of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._sell_rate

    @sell_rate.setter
    def sell_rate(self, sell_rate):
        """Sets the sell_rate of this PlReportItem.


        :param sell_rate: The sell_rate of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._sell_rate = sell_rate

    @property
    def buy_qty(self):
        """Gets the buy_qty of this PlReportItem.  # noqa: E501


        :return: The buy_qty of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._buy_qty

    @buy_qty.setter
    def buy_qty(self, buy_qty):
        """Sets the buy_qty of this PlReportItem.


        :param buy_qty: The buy_qty of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._buy_qty = buy_qty

    @property
    def product_code(self):
        """Gets the product_code of this PlReportItem.  # noqa: E501


        :return: The product_code of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this PlReportItem.


        :param product_code: The product_code of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def product_type_short(self):
        """Gets the product_type_short of this PlReportItem.  # noqa: E501


        :return: The product_type_short of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._product_type_short

    @product_type_short.setter
    def product_type_short(self, product_type_short):
        """Sets the product_type_short of this PlReportItem.


        :param product_type_short: The product_type_short of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._product_type_short = product_type_short

    @property
    def client_code(self):
        """Gets the client_code of this PlReportItem.  # noqa: E501


        :return: The client_code of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._client_code

    @client_code.setter
    def client_code(self, client_code):
        """Sets the client_code of this PlReportItem.


        :param client_code: The client_code of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._client_code = client_code

    @property
    def short_term_pl(self):
        """Gets the short_term_pl of this PlReportItem.  # noqa: E501


        :return: The short_term_pl of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._short_term_pl

    @short_term_pl.setter
    def short_term_pl(self, short_term_pl):
        """Sets the short_term_pl of this PlReportItem.


        :param short_term_pl: The short_term_pl of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._short_term_pl = short_term_pl

    @property
    def open_qty(self):
        """Gets the open_qty of this PlReportItem.  # noqa: E501


        :return: The open_qty of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._open_qty

    @open_qty.setter
    def open_qty(self, open_qty):
        """Sets the open_qty of this PlReportItem.


        :param open_qty: The open_qty of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._open_qty = open_qty

    @property
    def sell_date(self):
        """Gets the sell_date of this PlReportItem.  # noqa: E501


        :return: The sell_date of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._sell_date

    @sell_date.setter
    def sell_date(self, sell_date):
        """Sets the sell_date of this PlReportItem.


        :param sell_date: The sell_date of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._sell_date = sell_date

    @property
    def unrealised_pl_total(self):
        """Gets the unrealised_pl_total of this PlReportItem.  # noqa: E501


        :return: The unrealised_pl_total of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._unrealised_pl_total

    @unrealised_pl_total.setter
    def unrealised_pl_total(self, unrealised_pl_total):
        """Sets the unrealised_pl_total of this PlReportItem.


        :param unrealised_pl_total: The unrealised_pl_total of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._unrealised_pl_total = unrealised_pl_total

    @property
    def open_date(self):
        """Gets the open_date of this PlReportItem.  # noqa: E501


        :return: The open_date of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._open_date

    @open_date.setter
    def open_date(self, open_date):
        """Sets the open_date of this PlReportItem.


        :param open_date: The open_date of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._open_date = open_date

    @property
    def strike_price(self):
        """Gets the strike_price of this PlReportItem.  # noqa: E501


        :return: The strike_price of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._strike_price

    @strike_price.setter
    def strike_price(self, strike_price):
        """Sets the strike_price of this PlReportItem.


        :param strike_price: The strike_price of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._strike_price = strike_price

    @property
    def isin(self):
        """Gets the isin of this PlReportItem.  # noqa: E501


        :return: The isin of this PlReportItem.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this PlReportItem.


        :param isin: The isin of this PlReportItem.  # noqa: E501
        :type: str
        """

        self._isin = isin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlReportItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlReportItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
