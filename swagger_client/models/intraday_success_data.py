# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IntradaySuccessData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exchange_instrument_id': 'str',
        'prev_data_available_time': 'str',
        'option_chain_details': 'str',
        'exchange': 'str',
        'intraday_data': 'str'
    }

    attribute_map = {
        'exchange_instrument_id': 'exchangeInstrumentID',
        'prev_data_available_time': 'prevDataAvailableTime',
        'option_chain_details': 'optionChainDetails',
        'exchange': 'exchange',
        'intraday_data': 'intradayData'
    }

    def __init__(self, exchange_instrument_id=None, prev_data_available_time=None, option_chain_details=None,
                 exchange=None, intraday_data=None):  # noqa: E501
        """IntradaySuccessData - a model defined in Swagger"""  # noqa: E501
        self._exchange_instrument_id = None
        self._prev_data_available_time = None
        self._option_chain_details = None
        self._exchange = None
        self._intraday_data = None
        self.discriminator = None
        if exchange_instrument_id is not None:
            self.exchange_instrument_id = exchange_instrument_id
        if prev_data_available_time is not None:
            self.prev_data_available_time = prev_data_available_time
        if option_chain_details is not None:
            self.option_chain_details = option_chain_details
        if exchange is not None:
            self.exchange = exchange
        if intraday_data is not None:
            self.intraday_data = intraday_data

    @property
    def exchange_instrument_id(self):
        """Gets the exchange_instrument_id of this IntradaySuccessData.  # noqa: E501


        :return: The exchange_instrument_id of this IntradaySuccessData.  # noqa: E501
        :rtype: str
        """
        return self._exchange_instrument_id

    @exchange_instrument_id.setter
    def exchange_instrument_id(self, exchange_instrument_id):
        """Sets the exchange_instrument_id of this IntradaySuccessData.


        :param exchange_instrument_id: The exchange_instrument_id of this IntradaySuccessData.  # noqa: E501
        :type: str
        """

        self._exchange_instrument_id = exchange_instrument_id

    @property
    def prev_data_available_time(self):
        """Gets the prev_data_available_time of this IntradaySuccessData.  # noqa: E501


        :return: The prev_data_available_time of this IntradaySuccessData.  # noqa: E501
        :rtype: str
        """
        return self._prev_data_available_time

    @prev_data_available_time.setter
    def prev_data_available_time(self, prev_data_available_time):
        """Sets the prev_data_available_time of this IntradaySuccessData.


        :param prev_data_available_time: The prev_data_available_time of this IntradaySuccessData.  # noqa: E501
        :type: str
        """

        self._prev_data_available_time = prev_data_available_time

    @property
    def option_chain_details(self):
        """Gets the option_chain_details of this IntradaySuccessData.  # noqa: E501


        :return: The option_chain_details of this IntradaySuccessData.  # noqa: E501
        :rtype: str
        """
        return self._option_chain_details

    @option_chain_details.setter
    def option_chain_details(self, option_chain_details):
        """Sets the option_chain_details of this IntradaySuccessData.


        :param option_chain_details: The option_chain_details of this IntradaySuccessData.  # noqa: E501
        :type: str
        """

        self._option_chain_details = option_chain_details

    @property
    def exchange(self):
        """Gets the exchange of this IntradaySuccessData.  # noqa: E501


        :return: The exchange of this IntradaySuccessData.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this IntradaySuccessData.


        :param exchange: The exchange of this IntradaySuccessData.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def intraday_data(self):
        """Gets the intraday_data of this IntradaySuccessData.  # noqa: E501


        :return: The intraday_data of this IntradaySuccessData.  # noqa: E501
        :rtype: str
        """
        return self._intraday_data

    @intraday_data.setter
    def intraday_data(self, intraday_data):
        """Sets the intraday_data of this IntradaySuccessData.


        :param intraday_data: The intraday_data of this IntradaySuccessData.  # noqa: E501
        :type: str
        """

        self._intraday_data = intraday_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntradaySuccessData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntradaySuccessData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
