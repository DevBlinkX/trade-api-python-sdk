# coding: utf-8

"""
    portfolio-services Api Doc

    Rest APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sales@marketsimplified.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PositionConversionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'ord_action': 'str',
        'prd_type': 'str',
        'to_prd_type': 'str',
        'qty': 'int',
        'symbol': 'str',
        'exc_token': 'str',
        'exc': 'str',
        'lot_size': 'int',
        'instrument': 'str',
        'id': 'str'
    }

    attribute_map = {
        'type': 'type',
        'ord_action': 'ordAction',
        'prd_type': 'prdType',
        'to_prd_type': 'toPrdType',
        'qty': 'qty',
        'symbol': 'symbol',
        'exc_token': 'excToken',
        'exc': 'exc',
        'lot_size': 'lotSize',
        'instrument': 'instrument',
        'id': 'id'
    }

    def __init__(self, type=None, ord_action=None, prd_type=None, to_prd_type=None, qty=None, symbol=None,
                 exc_token=None, exc=None, lot_size=None, instrument=None, id=None):  # noqa: E501
        """PositionConversionRequest - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._ord_action = None
        self._prd_type = None
        self._to_prd_type = None
        self._qty = None
        self._symbol = None
        self._exc_token = None
        self._exc = None
        self._lot_size = None
        self._instrument = None
        self._id = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if ord_action is not None:
            self.ord_action = ord_action
        if prd_type is not None:
            self.prd_type = prd_type
        if to_prd_type is not None:
            self.to_prd_type = to_prd_type
        if qty is not None:
            self.qty = qty
        if symbol is not None:
            self.symbol = symbol
        if exc_token is not None:
            self.exc_token = exc_token
        if exc is not None:
            self.exc = exc
        if lot_size is not None:
            self.lot_size = lot_size
        if instrument is not None:
            self.instrument = instrument
        if id is not None:
            self.id = id

    @property
    def type(self):
        """Gets the type of this PositionConversionRequest.  # noqa: E501


        :return: The type of this PositionConversionRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PositionConversionRequest.


        :param type: The type of this PositionConversionRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def ord_action(self):
        """Gets the ord_action of this PositionConversionRequest.  # noqa: E501


        :return: The ord_action of this PositionConversionRequest.  # noqa: E501
        :rtype: str
        """
        return self._ord_action

    @ord_action.setter
    def ord_action(self, ord_action):
        """Sets the ord_action of this PositionConversionRequest.


        :param ord_action: The ord_action of this PositionConversionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUY", "SELL", "SHORT", "NONE"]  # noqa: E501
        if ord_action not in allowed_values:
            raise ValueError(
                "Invalid value for `ord_action` ({0}), must be one of {1}"  # noqa: E501
                .format(ord_action, allowed_values)
            )

        self._ord_action = ord_action

    @property
    def prd_type(self):
        """Gets the prd_type of this PositionConversionRequest.  # noqa: E501


        :return: The prd_type of this PositionConversionRequest.  # noqa: E501
        :rtype: str
        """
        return self._prd_type

    @prd_type.setter
    def prd_type(self, prd_type):
        """Sets the prd_type of this PositionConversionRequest.


        :param prd_type: The prd_type of this PositionConversionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CASH", "MTF", "INTRADAY", "MARGIN", "SHORTSELL", "COVER_ORDER", "BRACKET_ORDER", "NRML",
                          "TNC", "DELIVERY", "NONE"]  # noqa: E501
        if prd_type not in allowed_values:
            raise ValueError(
                "Invalid value for `prd_type` ({0}), must be one of {1}"  # noqa: E501
                .format(prd_type, allowed_values)
            )

        self._prd_type = prd_type

    @property
    def to_prd_type(self):
        """Gets the to_prd_type of this PositionConversionRequest.  # noqa: E501


        :return: The to_prd_type of this PositionConversionRequest.  # noqa: E501
        :rtype: str
        """
        return self._to_prd_type

    @to_prd_type.setter
    def to_prd_type(self, to_prd_type):
        """Sets the to_prd_type of this PositionConversionRequest.


        :param to_prd_type: The to_prd_type of this PositionConversionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CASH", "MTF", "INTRADAY", "MARGIN", "SHORTSELL", "COVER_ORDER", "BRACKET_ORDER", "NRML",
                          "TNC", "DELIVERY", "NONE"]  # noqa: E501
        if to_prd_type not in allowed_values:
            raise ValueError(
                "Invalid value for `to_prd_type` ({0}), must be one of {1}"  # noqa: E501
                .format(to_prd_type, allowed_values)
            )

        self._to_prd_type = to_prd_type

    @property
    def qty(self):
        """Gets the qty of this PositionConversionRequest.  # noqa: E501


        :return: The qty of this PositionConversionRequest.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this PositionConversionRequest.


        :param qty: The qty of this PositionConversionRequest.  # noqa: E501
        :type: int
        """

        self._qty = qty

    @property
    def symbol(self):
        """Gets the symbol of this PositionConversionRequest.  # noqa: E501


        :return: The symbol of this PositionConversionRequest.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this PositionConversionRequest.


        :param symbol: The symbol of this PositionConversionRequest.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def exc_token(self):
        """Gets the exc_token of this PositionConversionRequest.  # noqa: E501


        :return: The exc_token of this PositionConversionRequest.  # noqa: E501
        :rtype: str
        """
        return self._exc_token

    @exc_token.setter
    def exc_token(self, exc_token):
        """Sets the exc_token of this PositionConversionRequest.


        :param exc_token: The exc_token of this PositionConversionRequest.  # noqa: E501
        :type: str
        """

        self._exc_token = exc_token

    @property
    def exc(self):
        """Gets the exc of this PositionConversionRequest.  # noqa: E501


        :return: The exc of this PositionConversionRequest.  # noqa: E501
        :rtype: str
        """
        return self._exc

    @exc.setter
    def exc(self, exc):
        """Sets the exc of this PositionConversionRequest.


        :param exc: The exc of this PositionConversionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["NSE", "BSE", "NFO", "BFO", "CDS", "BCD", "MCXSX", "MCX", "NCO", "BCO", "ICEX"]  # noqa: E501
        if exc not in allowed_values:
            raise ValueError(
                "Invalid value for `exc` ({0}), must be one of {1}"  # noqa: E501
                .format(exc, allowed_values)
            )

        self._exc = exc

    @property
    def lot_size(self):
        """Gets the lot_size of this PositionConversionRequest.  # noqa: E501


        :return: The lot_size of this PositionConversionRequest.  # noqa: E501
        :rtype: int
        """
        return self._lot_size

    @lot_size.setter
    def lot_size(self, lot_size):
        """Sets the lot_size of this PositionConversionRequest.


        :param lot_size: The lot_size of this PositionConversionRequest.  # noqa: E501
        :type: int
        """

        self._lot_size = lot_size

    @property
    def instrument(self):
        """Gets the instrument of this PositionConversionRequest.  # noqa: E501


        :return: The instrument of this PositionConversionRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this PositionConversionRequest.


        :param instrument: The instrument of this PositionConversionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["STK", "ETF", "IDX", "COM", "UNDCUR", "CUR", "FUTIVX", "FUTSTK", "FUTIDX", "FUTCUR", "FUTIRD",
                          "FUTIRC", "FUTIRT", "FUTIRF", "FUTCOM", "FUTBLN", "FUTENR", "FUTMET", "FUTAGR", "OPTIDX",
                          "OPTSTK", "OPTCOM", "OPTBLN", "OPTENR", "OPTAGR", "OPTCUR", "OPTIRC", "OPTIRD", "UNDCOM",
                          "AUCSO", "FUTIDXSPR", "FUTSTKSPR", "FUTCURSPR", "FUTIRTSPR", "FUTIRCSPR", "FUTIRDSPR",
                          "OPTCURSPR", "OPTIRCSPR", "FUTCOMSPR", "OPTCOMSPR", "UNDIRC", "UNDIRD", "UNDIRT",
                          "NONE"]  # noqa: E501
        if instrument not in allowed_values:
            raise ValueError(
                "Invalid value for `instrument` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument, allowed_values)
            )

        self._instrument = instrument

    @property
    def id(self):
        """Gets the id of this PositionConversionRequest.  # noqa: E501


        :return: The id of this PositionConversionRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PositionConversionRequest.


        :param id: The id of this PositionConversionRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PositionConversionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionConversionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
