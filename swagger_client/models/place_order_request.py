# coding: utf-8

"""
    order-services Api Doc

    Rest APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sales@marketsimplified.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PlaceOrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'exc': 'str',
        'ord_action': 'str',
        'ord_validity': 'str',
        'ord_type': 'str',
        'prd_type': 'str',
        'qty': 'int',
        'dis_qty': 'int',
        'lot_size': 'int',
        'trigger_price': 'float',
        'instrument': 'str',
        'limit_price': 'float',
        'amo': 'bool',
        'build': 'str',
        'exc_token': 'str',
        'bo_stp_loss': 'float',
        'bo_tgt_price': 'float',
        'trailing_sl': 'float'
    }

    attribute_map = {
        'symbol': 'symbol',
        'exc': 'exc',
        'ord_action': 'ordAction',
        'ord_validity': 'ordValidity',
        'ord_type': 'ordType',
        'prd_type': 'prdType',
        'qty': 'qty',
        'dis_qty': 'disQty',
        'lot_size': 'lotSize',
        'trigger_price': 'triggerPrice',
        'instrument': 'instrument',
        'limit_price': 'limitPrice',
        'amo': 'amo',
        'build': 'build',
        'exc_token': 'excToken',
        'bo_stp_loss': 'boStpLoss',
        'bo_tgt_price': 'boTgtPrice',
        'trailing_sl': 'trailingSL'
    }

    def __init__(self, symbol=None, exc=None, ord_action=None, ord_validity=None, ord_type=None, prd_type=None,
                 qty=None, dis_qty=None, lot_size=None, trigger_price=None, instrument=None, limit_price=None, amo=None,
                 build=None, exc_token=None, bo_stp_loss=None, bo_tgt_price=None, trailing_sl=None):  # noqa: E501
        """PlaceOrderRequest - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._exc = None
        self._ord_action = None
        self._ord_validity = None
        self._ord_type = None
        self._prd_type = None
        self._qty = None
        self._dis_qty = None
        self._lot_size = None
        self._trigger_price = None
        self._instrument = None
        self._limit_price = None
        self._amo = None
        self._build = None
        self._exc_token = None
        self._bo_stp_loss = None
        self._bo_tgt_price = None
        self._trailing_sl = None
        self.discriminator = None
        self.symbol = symbol
        self.exc = exc
        self.ord_action = ord_action
        self.ord_validity = ord_validity
        self.ord_type = ord_type
        self.prd_type = prd_type
        self.qty = qty
        self.dis_qty = dis_qty
        self.lot_size = lot_size
        self.trigger_price = trigger_price
        if instrument is not None:
            self.instrument = instrument
        self.limit_price = limit_price
        self.amo = amo
        if build is not None:
            self.build = build
        if exc_token is not None:
            self.exc_token = exc_token
        if bo_stp_loss is not None:
            self.bo_stp_loss = bo_stp_loss
        if bo_tgt_price is not None:
            self.bo_tgt_price = bo_tgt_price
        if trailing_sl is not None:
            self.trailing_sl = trailing_sl

    @property
    def symbol(self):
        """Gets the symbol of this PlaceOrderRequest.  # noqa: E501


        :return: The symbol of this PlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this PlaceOrderRequest.


        :param symbol: The symbol of this PlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def exc(self):
        """Gets the exc of this PlaceOrderRequest.  # noqa: E501


        :return: The exc of this PlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._exc

    @exc.setter
    def exc(self, exc):
        """Sets the exc of this PlaceOrderRequest.


        :param exc: The exc of this PlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if exc is None:
            raise ValueError("Invalid value for `exc`, must not be `None`")  # noqa: E501
        allowed_values = ["NSE", "BSE", "NFO", "BFO", "CDS", "BCD", "MCXSX", "MCX", "NCO", "BCO", "ICEX"]  # noqa: E501
        if exc not in allowed_values:
            raise ValueError(
                "Invalid value for `exc` ({0}), must be one of {1}"  # noqa: E501
                .format(exc, allowed_values)
            )

        self._exc = exc

    @property
    def ord_action(self):
        """Gets the ord_action of this PlaceOrderRequest.  # noqa: E501


        :return: The ord_action of this PlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._ord_action

    @ord_action.setter
    def ord_action(self, ord_action):
        """Sets the ord_action of this PlaceOrderRequest.


        :param ord_action: The ord_action of this PlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if ord_action is None:
            raise ValueError("Invalid value for `ord_action`, must not be `None`")  # noqa: E501
        allowed_values = ["BUY", "SELL", "SHORT", "NONE"]  # noqa: E501
        if ord_action not in allowed_values:
            raise ValueError(
                "Invalid value for `ord_action` ({0}), must be one of {1}"  # noqa: E501
                .format(ord_action, allowed_values)
            )

        self._ord_action = ord_action

    @property
    def ord_validity(self):
        """Gets the ord_validity of this PlaceOrderRequest.  # noqa: E501


        :return: The ord_validity of this PlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._ord_validity

    @ord_validity.setter
    def ord_validity(self, ord_validity):
        """Sets the ord_validity of this PlaceOrderRequest.


        :param ord_validity: The ord_validity of this PlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if ord_validity is None:
            raise ValueError("Invalid value for `ord_validity`, must not be `None`")  # noqa: E501
        allowed_values = ["DAY", "IOC", "GMT", "GTC", "AMO", "GTD", "NONE"]  # noqa: E501
        if ord_validity not in allowed_values:
            raise ValueError(
                "Invalid value for `ord_validity` ({0}), must be one of {1}"  # noqa: E501
                .format(ord_validity, allowed_values)
            )

        self._ord_validity = ord_validity

    @property
    def ord_type(self):
        """Gets the ord_type of this PlaceOrderRequest.  # noqa: E501


        :return: The ord_type of this PlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._ord_type

    @ord_type.setter
    def ord_type(self, ord_type):
        """Sets the ord_type of this PlaceOrderRequest.


        :param ord_type: The ord_type of this PlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if ord_type is None:
            raise ValueError("Invalid value for `ord_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Market", "Limit", "Stop", "Stop-loss", "SL-M", "SL", "None"]  # noqa: E501
        if ord_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ord_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ord_type, allowed_values)
            )

        self._ord_type = ord_type

    @property
    def prd_type(self):
        """Gets the prd_type of this PlaceOrderRequest.  # noqa: E501


        :return: The prd_type of this PlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._prd_type

    @prd_type.setter
    def prd_type(self, prd_type):
        """Sets the prd_type of this PlaceOrderRequest.


        :param prd_type: The prd_type of this PlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if prd_type is None:
            raise ValueError("Invalid value for `prd_type`, must not be `None`")  # noqa: E501
        allowed_values = ["CASH", "MTF", "INTRADAY", "MARGIN", "SHORTSELL", "COVER_ORDER", "BRACKET_ORDER", "NRML",
                          "TNC", "DELIVERY", "NONE"]  # noqa: E501
        if prd_type not in allowed_values:
            raise ValueError(
                "Invalid value for `prd_type` ({0}), must be one of {1}"  # noqa: E501
                .format(prd_type, allowed_values)
            )

        self._prd_type = prd_type

    @property
    def qty(self):
        """Gets the qty of this PlaceOrderRequest.  # noqa: E501


        :return: The qty of this PlaceOrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this PlaceOrderRequest.


        :param qty: The qty of this PlaceOrderRequest.  # noqa: E501
        :type: int
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def dis_qty(self):
        """Gets the dis_qty of this PlaceOrderRequest.  # noqa: E501


        :return: The dis_qty of this PlaceOrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._dis_qty

    @dis_qty.setter
    def dis_qty(self, dis_qty):
        """Sets the dis_qty of this PlaceOrderRequest.


        :param dis_qty: The dis_qty of this PlaceOrderRequest.  # noqa: E501
        :type: int
        """
        if dis_qty is None:
            raise ValueError("Invalid value for `dis_qty`, must not be `None`")  # noqa: E501

        self._dis_qty = dis_qty

    @property
    def lot_size(self):
        """Gets the lot_size of this PlaceOrderRequest.  # noqa: E501


        :return: The lot_size of this PlaceOrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._lot_size

    @lot_size.setter
    def lot_size(self, lot_size):
        """Sets the lot_size of this PlaceOrderRequest.


        :param lot_size: The lot_size of this PlaceOrderRequest.  # noqa: E501
        :type: int
        """
        if lot_size is None:
            raise ValueError("Invalid value for `lot_size`, must not be `None`")  # noqa: E501

        self._lot_size = lot_size

    @property
    def trigger_price(self):
        """Gets the trigger_price of this PlaceOrderRequest.  # noqa: E501


        :return: The trigger_price of this PlaceOrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._trigger_price

    @trigger_price.setter
    def trigger_price(self, trigger_price):
        """Sets the trigger_price of this PlaceOrderRequest.


        :param trigger_price: The trigger_price of this PlaceOrderRequest.  # noqa: E501
        :type: float
        """
        if trigger_price is None:
            raise ValueError("Invalid value for `trigger_price`, must not be `None`")  # noqa: E501

        self._trigger_price = trigger_price

    @property
    def instrument(self):
        """Gets the instrument of this PlaceOrderRequest.  # noqa: E501


        :return: The instrument of this PlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this PlaceOrderRequest.


        :param instrument: The instrument of this PlaceOrderRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["STK", "ETF", "IDX", "COM", "UNDCUR", "CUR", "FUTIVX", "FUTSTK", "FUTIDX", "FUTCUR", "FUTIRD",
                          "FUTIRC", "FUTIRT", "FUTIRF", "FUTCOM", "FUTBLN", "FUTENR", "FUTMET", "FUTAGR", "OPTIDX",
                          "OPTSTK", "OPTCOM", "OPTBLN", "OPTENR", "OPTAGR", "OPTCUR", "OPTIRC", "OPTIRD", "UNDCOM",
                          "AUCSO", "FUTIDXSPR", "FUTSTKSPR", "FUTCURSPR", "FUTIRTSPR", "FUTIRCSPR", "FUTIRDSPR",
                          "OPTCURSPR", "OPTIRCSPR", "FUTCOMSPR", "OPTCOMSPR", "UNDIRC", "UNDIRD", "UNDIRT",
                          "NONE"]  # noqa: E501
        if instrument not in allowed_values:
            raise ValueError(
                "Invalid value for `instrument` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument, allowed_values)
            )

        self._instrument = instrument

    @property
    def limit_price(self):
        """Gets the limit_price of this PlaceOrderRequest.  # noqa: E501


        :return: The limit_price of this PlaceOrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this PlaceOrderRequest.


        :param limit_price: The limit_price of this PlaceOrderRequest.  # noqa: E501
        :type: float
        """
        if limit_price is None:
            raise ValueError("Invalid value for `limit_price`, must not be `None`")  # noqa: E501

        self._limit_price = limit_price

    @property
    def amo(self):
        """Gets the amo of this PlaceOrderRequest.  # noqa: E501


        :return: The amo of this PlaceOrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._amo

    @amo.setter
    def amo(self, amo):
        """Sets the amo of this PlaceOrderRequest.


        :param amo: The amo of this PlaceOrderRequest.  # noqa: E501
        :type: bool
        """
        if amo is None:
            raise ValueError("Invalid value for `amo`, must not be `None`")  # noqa: E501

        self._amo = amo

    @property
    def build(self):
        """Gets the build of this PlaceOrderRequest.  # noqa: E501


        :return: The build of this PlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this PlaceOrderRequest.


        :param build: The build of this PlaceOrderRequest.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def exc_token(self):
        """Gets the exc_token of this PlaceOrderRequest.  # noqa: E501


        :return: The exc_token of this PlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._exc_token

    @exc_token.setter
    def exc_token(self, exc_token):
        """Sets the exc_token of this PlaceOrderRequest.


        :param exc_token: The exc_token of this PlaceOrderRequest.  # noqa: E501
        :type: str
        """

        self._exc_token = exc_token

    @property
    def bo_stp_loss(self):
        """Gets the bo_stp_loss of this PlaceOrderRequest.  # noqa: E501


        :return: The bo_stp_loss of this PlaceOrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._bo_stp_loss

    @bo_stp_loss.setter
    def bo_stp_loss(self, bo_stp_loss):
        """Sets the bo_stp_loss of this PlaceOrderRequest.


        :param bo_stp_loss: The bo_stp_loss of this PlaceOrderRequest.  # noqa: E501
        :type: float
        """

        self._bo_stp_loss = bo_stp_loss

    @property
    def bo_tgt_price(self):
        """Gets the bo_tgt_price of this PlaceOrderRequest.  # noqa: E501


        :return: The bo_tgt_price of this PlaceOrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._bo_tgt_price

    @bo_tgt_price.setter
    def bo_tgt_price(self, bo_tgt_price):
        """Sets the bo_tgt_price of this PlaceOrderRequest.


        :param bo_tgt_price: The bo_tgt_price of this PlaceOrderRequest.  # noqa: E501
        :type: float
        """

        self._bo_tgt_price = bo_tgt_price

    @property
    def trailing_sl(self):
        """Gets the trailing_sl of this PlaceOrderRequest.  # noqa: E501


        :return: The trailing_sl of this PlaceOrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._trailing_sl

    @trailing_sl.setter
    def trailing_sl(self, trailing_sl):
        """Sets the trailing_sl of this PlaceOrderRequest.


        :param trailing_sl: The trailing_sl of this PlaceOrderRequest.  # noqa: E501
        :type: float
        """

        self._trailing_sl = trailing_sl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlaceOrderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlaceOrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
