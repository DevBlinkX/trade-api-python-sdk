# coding: utf-8

"""
    order-services Api Doc

    Rest APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sales@marketsimplified.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BrokerageCharge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_margin': 'str',
        'span_margin': 'str',
        'exposure_margin': 'str',
        'available_bal': 'str',
        'var_margin': 'str',
        'insufficient_bal': 'str',
        'brokerage': 'str',
        'broker_brokerage': 'str',
        'levies_brokerage': 'str',
        'other_brokerage': 'str'
    }

    attribute_map = {
        'total_margin': 'totalMargin',
        'span_margin': 'spanMargin',
        'exposure_margin': 'exposureMargin',
        'available_bal': 'availableBal',
        'var_margin': 'varMargin',
        'insufficient_bal': 'insufficientBal',
        'brokerage': 'brokerage',
        'broker_brokerage': 'brokerBrokerage',
        'levies_brokerage': 'leviesBrokerage',
        'other_brokerage': 'otherBrokerage'
    }

    def __init__(self, total_margin=None, span_margin=None, exposure_margin=None, available_bal=None, var_margin=None,
                 insufficient_bal=None, brokerage=None, broker_brokerage=None, levies_brokerage=None,
                 other_brokerage=None):  # noqa: E501
        """BrokerageCharge - a model defined in Swagger"""  # noqa: E501
        self._total_margin = None
        self._span_margin = None
        self._exposure_margin = None
        self._available_bal = None
        self._var_margin = None
        self._insufficient_bal = None
        self._brokerage = None
        self._broker_brokerage = None
        self._levies_brokerage = None
        self._other_brokerage = None
        self.discriminator = None
        if total_margin is not None:
            self.total_margin = total_margin
        if span_margin is not None:
            self.span_margin = span_margin
        if exposure_margin is not None:
            self.exposure_margin = exposure_margin
        if available_bal is not None:
            self.available_bal = available_bal
        if var_margin is not None:
            self.var_margin = var_margin
        if insufficient_bal is not None:
            self.insufficient_bal = insufficient_bal
        if brokerage is not None:
            self.brokerage = brokerage
        if broker_brokerage is not None:
            self.broker_brokerage = broker_brokerage
        if levies_brokerage is not None:
            self.levies_brokerage = levies_brokerage
        if other_brokerage is not None:
            self.other_brokerage = other_brokerage

    @property
    def total_margin(self):
        """Gets the total_margin of this BrokerageCharge.  # noqa: E501


        :return: The total_margin of this BrokerageCharge.  # noqa: E501
        :rtype: str
        """
        return self._total_margin

    @total_margin.setter
    def total_margin(self, total_margin):
        """Sets the total_margin of this BrokerageCharge.


        :param total_margin: The total_margin of this BrokerageCharge.  # noqa: E501
        :type: str
        """

        self._total_margin = total_margin

    @property
    def span_margin(self):
        """Gets the span_margin of this BrokerageCharge.  # noqa: E501


        :return: The span_margin of this BrokerageCharge.  # noqa: E501
        :rtype: str
        """
        return self._span_margin

    @span_margin.setter
    def span_margin(self, span_margin):
        """Sets the span_margin of this BrokerageCharge.


        :param span_margin: The span_margin of this BrokerageCharge.  # noqa: E501
        :type: str
        """

        self._span_margin = span_margin

    @property
    def exposure_margin(self):
        """Gets the exposure_margin of this BrokerageCharge.  # noqa: E501


        :return: The exposure_margin of this BrokerageCharge.  # noqa: E501
        :rtype: str
        """
        return self._exposure_margin

    @exposure_margin.setter
    def exposure_margin(self, exposure_margin):
        """Sets the exposure_margin of this BrokerageCharge.


        :param exposure_margin: The exposure_margin of this BrokerageCharge.  # noqa: E501
        :type: str
        """

        self._exposure_margin = exposure_margin

    @property
    def available_bal(self):
        """Gets the available_bal of this BrokerageCharge.  # noqa: E501


        :return: The available_bal of this BrokerageCharge.  # noqa: E501
        :rtype: str
        """
        return self._available_bal

    @available_bal.setter
    def available_bal(self, available_bal):
        """Sets the available_bal of this BrokerageCharge.


        :param available_bal: The available_bal of this BrokerageCharge.  # noqa: E501
        :type: str
        """

        self._available_bal = available_bal

    @property
    def var_margin(self):
        """Gets the var_margin of this BrokerageCharge.  # noqa: E501


        :return: The var_margin of this BrokerageCharge.  # noqa: E501
        :rtype: str
        """
        return self._var_margin

    @var_margin.setter
    def var_margin(self, var_margin):
        """Sets the var_margin of this BrokerageCharge.


        :param var_margin: The var_margin of this BrokerageCharge.  # noqa: E501
        :type: str
        """

        self._var_margin = var_margin

    @property
    def insufficient_bal(self):
        """Gets the insufficient_bal of this BrokerageCharge.  # noqa: E501


        :return: The insufficient_bal of this BrokerageCharge.  # noqa: E501
        :rtype: str
        """
        return self._insufficient_bal

    @insufficient_bal.setter
    def insufficient_bal(self, insufficient_bal):
        """Sets the insufficient_bal of this BrokerageCharge.


        :param insufficient_bal: The insufficient_bal of this BrokerageCharge.  # noqa: E501
        :type: str
        """

        self._insufficient_bal = insufficient_bal

    @property
    def brokerage(self):
        """Gets the brokerage of this BrokerageCharge.  # noqa: E501


        :return: The brokerage of this BrokerageCharge.  # noqa: E501
        :rtype: str
        """
        return self._brokerage

    @brokerage.setter
    def brokerage(self, brokerage):
        """Sets the brokerage of this BrokerageCharge.


        :param brokerage: The brokerage of this BrokerageCharge.  # noqa: E501
        :type: str
        """

        self._brokerage = brokerage

    @property
    def broker_brokerage(self):
        """Gets the broker_brokerage of this BrokerageCharge.  # noqa: E501


        :return: The broker_brokerage of this BrokerageCharge.  # noqa: E501
        :rtype: str
        """
        return self._broker_brokerage

    @broker_brokerage.setter
    def broker_brokerage(self, broker_brokerage):
        """Sets the broker_brokerage of this BrokerageCharge.


        :param broker_brokerage: The broker_brokerage of this BrokerageCharge.  # noqa: E501
        :type: str
        """

        self._broker_brokerage = broker_brokerage

    @property
    def levies_brokerage(self):
        """Gets the levies_brokerage of this BrokerageCharge.  # noqa: E501


        :return: The levies_brokerage of this BrokerageCharge.  # noqa: E501
        :rtype: str
        """
        return self._levies_brokerage

    @levies_brokerage.setter
    def levies_brokerage(self, levies_brokerage):
        """Sets the levies_brokerage of this BrokerageCharge.


        :param levies_brokerage: The levies_brokerage of this BrokerageCharge.  # noqa: E501
        :type: str
        """

        self._levies_brokerage = levies_brokerage

    @property
    def other_brokerage(self):
        """Gets the other_brokerage of this BrokerageCharge.  # noqa: E501


        :return: The other_brokerage of this BrokerageCharge.  # noqa: E501
        :rtype: str
        """
        return self._other_brokerage

    @other_brokerage.setter
    def other_brokerage(self, other_brokerage):
        """Sets the other_brokerage of this BrokerageCharge.


        :param other_brokerage: The other_brokerage of this BrokerageCharge.  # noqa: E501
        :type: str
        """

        self._other_brokerage = other_brokerage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrokerageCharge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrokerageCharge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
