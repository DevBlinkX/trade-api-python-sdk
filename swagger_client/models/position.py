# coding: utf-8

"""
    portfolio-services Api Doc

    Rest APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sales@marketsimplified.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Position(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'SymbolDto',
        'prd_type': 'str',
        'type': 'str',
        'ltp': 'float',
        'booked_pnl': 'str',
        'un_realized_pnl': 'str',
        'pnl_perc': 'float',
        'net_pnl': 'float',
        'prev_pos': 'int',
        'prev_avg_price': 'float',
        'curr_pos': 'int',
        'curr_avg_price': 'float',
        'net_qty': 'int',
        'buy_qty': 'int',
        'sell_qty': 'int',
        'day_buy_qty': 'int',
        'day_sell_qty': 'int',
        'cf_buy_qty': 'int',
        'cf_sell_qty': 'int',
        'buy_avg_price': 'float',
        'sell_avg_price': 'float',
        'day_buy_avg_price': 'float',
        'day_sell_avg_price': 'float',
        'cf_buy_avg_price': 'float',
        'cf_sell_avg_price': 'float',
        'buy_amt': 'float',
        'sell_amt': 'float',
        'cf_buy_amt': 'float',
        'cf_sell_amt': 'float',
        'avg_price': 'float',
        'und_asset': 'str',
        'square_off': 'bool',
        'transferable': 'bool',
        'ord_action': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'prd_type': 'prdType',
        'type': 'type',
        'ltp': 'ltp',
        'booked_pnl': 'bookedPnl',
        'un_realized_pnl': 'unRealizedPnl',
        'pnl_perc': 'pnlPerc',
        'net_pnl': 'netPnl',
        'prev_pos': 'prevPos',
        'prev_avg_price': 'prevAvgPrice',
        'curr_pos': 'currPos',
        'curr_avg_price': 'currAvgPrice',
        'net_qty': 'netQty',
        'buy_qty': 'buyQty',
        'sell_qty': 'sellQty',
        'day_buy_qty': 'dayBuyQty',
        'day_sell_qty': 'daySellQty',
        'cf_buy_qty': 'cfBuyQty',
        'cf_sell_qty': 'cfSellQty',
        'buy_avg_price': 'buyAvgPrice',
        'sell_avg_price': 'sellAvgPrice',
        'day_buy_avg_price': 'dayBuyAvgPrice',
        'day_sell_avg_price': 'daySellAvgPrice',
        'cf_buy_avg_price': 'cfBuyAvgPrice',
        'cf_sell_avg_price': 'cfSellAvgPrice',
        'buy_amt': 'buyAmt',
        'sell_amt': 'sellAmt',
        'cf_buy_amt': 'cfBuyAmt',
        'cf_sell_amt': 'cfSellAmt',
        'avg_price': 'avgPrice',
        'und_asset': 'undAsset',
        'square_off': 'squareOff',
        'transferable': 'transferable',
        'ord_action': 'ordAction'
    }

    def __init__(self, symbol=None, prd_type=None, type=None, ltp=None, booked_pnl=None, un_realized_pnl=None,
                 pnl_perc=None, net_pnl=None, prev_pos=None, prev_avg_price=None, curr_pos=None, curr_avg_price=None,
                 net_qty=None, buy_qty=None, sell_qty=None, day_buy_qty=None, day_sell_qty=None, cf_buy_qty=None,
                 cf_sell_qty=None, buy_avg_price=None, sell_avg_price=None, day_buy_avg_price=None,
                 day_sell_avg_price=None, cf_buy_avg_price=None, cf_sell_avg_price=None, buy_amt=None, sell_amt=None,
                 cf_buy_amt=None, cf_sell_amt=None, avg_price=None, und_asset=None, square_off=None, transferable=None,
                 ord_action=None):  # noqa: E501
        """Position - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._prd_type = None
        self._type = None
        self._ltp = None
        self._booked_pnl = None
        self._un_realized_pnl = None
        self._pnl_perc = None
        self._net_pnl = None
        self._prev_pos = None
        self._prev_avg_price = None
        self._curr_pos = None
        self._curr_avg_price = None
        self._net_qty = None
        self._buy_qty = None
        self._sell_qty = None
        self._day_buy_qty = None
        self._day_sell_qty = None
        self._cf_buy_qty = None
        self._cf_sell_qty = None
        self._buy_avg_price = None
        self._sell_avg_price = None
        self._day_buy_avg_price = None
        self._day_sell_avg_price = None
        self._cf_buy_avg_price = None
        self._cf_sell_avg_price = None
        self._buy_amt = None
        self._sell_amt = None
        self._cf_buy_amt = None
        self._cf_sell_amt = None
        self._avg_price = None
        self._und_asset = None
        self._square_off = None
        self._transferable = None
        self._ord_action = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if prd_type is not None:
            self.prd_type = prd_type
        if type is not None:
            self.type = type
        if ltp is not None:
            self.ltp = ltp
        if booked_pnl is not None:
            self.booked_pnl = booked_pnl
        if un_realized_pnl is not None:
            self.un_realized_pnl = un_realized_pnl
        if pnl_perc is not None:
            self.pnl_perc = pnl_perc
        if net_pnl is not None:
            self.net_pnl = net_pnl
        if prev_pos is not None:
            self.prev_pos = prev_pos
        if prev_avg_price is not None:
            self.prev_avg_price = prev_avg_price
        if curr_pos is not None:
            self.curr_pos = curr_pos
        if curr_avg_price is not None:
            self.curr_avg_price = curr_avg_price
        if net_qty is not None:
            self.net_qty = net_qty
        if buy_qty is not None:
            self.buy_qty = buy_qty
        if sell_qty is not None:
            self.sell_qty = sell_qty
        if day_buy_qty is not None:
            self.day_buy_qty = day_buy_qty
        if day_sell_qty is not None:
            self.day_sell_qty = day_sell_qty
        if cf_buy_qty is not None:
            self.cf_buy_qty = cf_buy_qty
        if cf_sell_qty is not None:
            self.cf_sell_qty = cf_sell_qty
        if buy_avg_price is not None:
            self.buy_avg_price = buy_avg_price
        if sell_avg_price is not None:
            self.sell_avg_price = sell_avg_price
        if day_buy_avg_price is not None:
            self.day_buy_avg_price = day_buy_avg_price
        if day_sell_avg_price is not None:
            self.day_sell_avg_price = day_sell_avg_price
        if cf_buy_avg_price is not None:
            self.cf_buy_avg_price = cf_buy_avg_price
        if cf_sell_avg_price is not None:
            self.cf_sell_avg_price = cf_sell_avg_price
        if buy_amt is not None:
            self.buy_amt = buy_amt
        if sell_amt is not None:
            self.sell_amt = sell_amt
        if cf_buy_amt is not None:
            self.cf_buy_amt = cf_buy_amt
        if cf_sell_amt is not None:
            self.cf_sell_amt = cf_sell_amt
        if avg_price is not None:
            self.avg_price = avg_price
        if und_asset is not None:
            self.und_asset = und_asset
        if square_off is not None:
            self.square_off = square_off
        if transferable is not None:
            self.transferable = transferable
        if ord_action is not None:
            self.ord_action = ord_action

    @property
    def symbol(self):
        """Gets the symbol of this Position.  # noqa: E501


        :return: The symbol of this Position.  # noqa: E501
        :rtype: SymbolDto
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Position.


        :param symbol: The symbol of this Position.  # noqa: E501
        :type: SymbolDto
        """

        self._symbol = symbol

    @property
    def prd_type(self):
        """Gets the prd_type of this Position.  # noqa: E501


        :return: The prd_type of this Position.  # noqa: E501
        :rtype: str
        """
        return self._prd_type

    @prd_type.setter
    def prd_type(self, prd_type):
        """Sets the prd_type of this Position.


        :param prd_type: The prd_type of this Position.  # noqa: E501
        :type: str
        """
        allowed_values = ["CASH", "MTF", "INTRADAY", "MARGIN", "SHORTSELL", "COVER_ORDER", "BRACKET_ORDER", "NRML",
                          "TNC", "DELIVERY", "NONE"]  # noqa: E501
        if prd_type not in allowed_values:
            raise ValueError(
                "Invalid value for `prd_type` ({0}), must be one of {1}"  # noqa: E501
                .format(prd_type, allowed_values)
            )

        self._prd_type = prd_type

    @property
    def type(self):
        """Gets the type of this Position.  # noqa: E501


        :return: The type of this Position.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Position.


        :param type: The type of this Position.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def ltp(self):
        """Gets the ltp of this Position.  # noqa: E501


        :return: The ltp of this Position.  # noqa: E501
        :rtype: float
        """
        return self._ltp

    @ltp.setter
    def ltp(self, ltp):
        """Sets the ltp of this Position.


        :param ltp: The ltp of this Position.  # noqa: E501
        :type: float
        """

        self._ltp = ltp

    @property
    def booked_pnl(self):
        """Gets the booked_pnl of this Position.  # noqa: E501


        :return: The booked_pnl of this Position.  # noqa: E501
        :rtype: str
        """
        return self._booked_pnl

    @booked_pnl.setter
    def booked_pnl(self, booked_pnl):
        """Sets the booked_pnl of this Position.


        :param booked_pnl: The booked_pnl of this Position.  # noqa: E501
        :type: str
        """

        self._booked_pnl = booked_pnl

    @property
    def un_realized_pnl(self):
        """Gets the un_realized_pnl of this Position.  # noqa: E501


        :return: The un_realized_pnl of this Position.  # noqa: E501
        :rtype: str
        """
        return self._un_realized_pnl

    @un_realized_pnl.setter
    def un_realized_pnl(self, un_realized_pnl):
        """Sets the un_realized_pnl of this Position.


        :param un_realized_pnl: The un_realized_pnl of this Position.  # noqa: E501
        :type: str
        """

        self._un_realized_pnl = un_realized_pnl

    @property
    def pnl_perc(self):
        """Gets the pnl_perc of this Position.  # noqa: E501


        :return: The pnl_perc of this Position.  # noqa: E501
        :rtype: float
        """
        return self._pnl_perc

    @pnl_perc.setter
    def pnl_perc(self, pnl_perc):
        """Sets the pnl_perc of this Position.


        :param pnl_perc: The pnl_perc of this Position.  # noqa: E501
        :type: float
        """

        self._pnl_perc = pnl_perc

    @property
    def net_pnl(self):
        """Gets the net_pnl of this Position.  # noqa: E501


        :return: The net_pnl of this Position.  # noqa: E501
        :rtype: float
        """
        return self._net_pnl

    @net_pnl.setter
    def net_pnl(self, net_pnl):
        """Sets the net_pnl of this Position.


        :param net_pnl: The net_pnl of this Position.  # noqa: E501
        :type: float
        """

        self._net_pnl = net_pnl

    @property
    def prev_pos(self):
        """Gets the prev_pos of this Position.  # noqa: E501


        :return: The prev_pos of this Position.  # noqa: E501
        :rtype: int
        """
        return self._prev_pos

    @prev_pos.setter
    def prev_pos(self, prev_pos):
        """Sets the prev_pos of this Position.


        :param prev_pos: The prev_pos of this Position.  # noqa: E501
        :type: int
        """

        self._prev_pos = prev_pos

    @property
    def prev_avg_price(self):
        """Gets the prev_avg_price of this Position.  # noqa: E501


        :return: The prev_avg_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._prev_avg_price

    @prev_avg_price.setter
    def prev_avg_price(self, prev_avg_price):
        """Sets the prev_avg_price of this Position.


        :param prev_avg_price: The prev_avg_price of this Position.  # noqa: E501
        :type: float
        """

        self._prev_avg_price = prev_avg_price

    @property
    def curr_pos(self):
        """Gets the curr_pos of this Position.  # noqa: E501


        :return: The curr_pos of this Position.  # noqa: E501
        :rtype: int
        """
        return self._curr_pos

    @curr_pos.setter
    def curr_pos(self, curr_pos):
        """Sets the curr_pos of this Position.


        :param curr_pos: The curr_pos of this Position.  # noqa: E501
        :type: int
        """

        self._curr_pos = curr_pos

    @property
    def curr_avg_price(self):
        """Gets the curr_avg_price of this Position.  # noqa: E501


        :return: The curr_avg_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._curr_avg_price

    @curr_avg_price.setter
    def curr_avg_price(self, curr_avg_price):
        """Sets the curr_avg_price of this Position.


        :param curr_avg_price: The curr_avg_price of this Position.  # noqa: E501
        :type: float
        """

        self._curr_avg_price = curr_avg_price

    @property
    def net_qty(self):
        """Gets the net_qty of this Position.  # noqa: E501


        :return: The net_qty of this Position.  # noqa: E501
        :rtype: int
        """
        return self._net_qty

    @net_qty.setter
    def net_qty(self, net_qty):
        """Sets the net_qty of this Position.


        :param net_qty: The net_qty of this Position.  # noqa: E501
        :type: int
        """

        self._net_qty = net_qty

    @property
    def buy_qty(self):
        """Gets the buy_qty of this Position.  # noqa: E501


        :return: The buy_qty of this Position.  # noqa: E501
        :rtype: int
        """
        return self._buy_qty

    @buy_qty.setter
    def buy_qty(self, buy_qty):
        """Sets the buy_qty of this Position.


        :param buy_qty: The buy_qty of this Position.  # noqa: E501
        :type: int
        """

        self._buy_qty = buy_qty

    @property
    def sell_qty(self):
        """Gets the sell_qty of this Position.  # noqa: E501


        :return: The sell_qty of this Position.  # noqa: E501
        :rtype: int
        """
        return self._sell_qty

    @sell_qty.setter
    def sell_qty(self, sell_qty):
        """Sets the sell_qty of this Position.


        :param sell_qty: The sell_qty of this Position.  # noqa: E501
        :type: int
        """

        self._sell_qty = sell_qty

    @property
    def day_buy_qty(self):
        """Gets the day_buy_qty of this Position.  # noqa: E501


        :return: The day_buy_qty of this Position.  # noqa: E501
        :rtype: int
        """
        return self._day_buy_qty

    @day_buy_qty.setter
    def day_buy_qty(self, day_buy_qty):
        """Sets the day_buy_qty of this Position.


        :param day_buy_qty: The day_buy_qty of this Position.  # noqa: E501
        :type: int
        """

        self._day_buy_qty = day_buy_qty

    @property
    def day_sell_qty(self):
        """Gets the day_sell_qty of this Position.  # noqa: E501


        :return: The day_sell_qty of this Position.  # noqa: E501
        :rtype: int
        """
        return self._day_sell_qty

    @day_sell_qty.setter
    def day_sell_qty(self, day_sell_qty):
        """Sets the day_sell_qty of this Position.


        :param day_sell_qty: The day_sell_qty of this Position.  # noqa: E501
        :type: int
        """

        self._day_sell_qty = day_sell_qty

    @property
    def cf_buy_qty(self):
        """Gets the cf_buy_qty of this Position.  # noqa: E501


        :return: The cf_buy_qty of this Position.  # noqa: E501
        :rtype: int
        """
        return self._cf_buy_qty

    @cf_buy_qty.setter
    def cf_buy_qty(self, cf_buy_qty):
        """Sets the cf_buy_qty of this Position.


        :param cf_buy_qty: The cf_buy_qty of this Position.  # noqa: E501
        :type: int
        """

        self._cf_buy_qty = cf_buy_qty

    @property
    def cf_sell_qty(self):
        """Gets the cf_sell_qty of this Position.  # noqa: E501


        :return: The cf_sell_qty of this Position.  # noqa: E501
        :rtype: int
        """
        return self._cf_sell_qty

    @cf_sell_qty.setter
    def cf_sell_qty(self, cf_sell_qty):
        """Sets the cf_sell_qty of this Position.


        :param cf_sell_qty: The cf_sell_qty of this Position.  # noqa: E501
        :type: int
        """

        self._cf_sell_qty = cf_sell_qty

    @property
    def buy_avg_price(self):
        """Gets the buy_avg_price of this Position.  # noqa: E501


        :return: The buy_avg_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._buy_avg_price

    @buy_avg_price.setter
    def buy_avg_price(self, buy_avg_price):
        """Sets the buy_avg_price of this Position.


        :param buy_avg_price: The buy_avg_price of this Position.  # noqa: E501
        :type: float
        """

        self._buy_avg_price = buy_avg_price

    @property
    def sell_avg_price(self):
        """Gets the sell_avg_price of this Position.  # noqa: E501


        :return: The sell_avg_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sell_avg_price

    @sell_avg_price.setter
    def sell_avg_price(self, sell_avg_price):
        """Sets the sell_avg_price of this Position.


        :param sell_avg_price: The sell_avg_price of this Position.  # noqa: E501
        :type: float
        """

        self._sell_avg_price = sell_avg_price

    @property
    def day_buy_avg_price(self):
        """Gets the day_buy_avg_price of this Position.  # noqa: E501


        :return: The day_buy_avg_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._day_buy_avg_price

    @day_buy_avg_price.setter
    def day_buy_avg_price(self, day_buy_avg_price):
        """Sets the day_buy_avg_price of this Position.


        :param day_buy_avg_price: The day_buy_avg_price of this Position.  # noqa: E501
        :type: float
        """

        self._day_buy_avg_price = day_buy_avg_price

    @property
    def day_sell_avg_price(self):
        """Gets the day_sell_avg_price of this Position.  # noqa: E501


        :return: The day_sell_avg_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._day_sell_avg_price

    @day_sell_avg_price.setter
    def day_sell_avg_price(self, day_sell_avg_price):
        """Sets the day_sell_avg_price of this Position.


        :param day_sell_avg_price: The day_sell_avg_price of this Position.  # noqa: E501
        :type: float
        """

        self._day_sell_avg_price = day_sell_avg_price

    @property
    def cf_buy_avg_price(self):
        """Gets the cf_buy_avg_price of this Position.  # noqa: E501


        :return: The cf_buy_avg_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._cf_buy_avg_price

    @cf_buy_avg_price.setter
    def cf_buy_avg_price(self, cf_buy_avg_price):
        """Sets the cf_buy_avg_price of this Position.


        :param cf_buy_avg_price: The cf_buy_avg_price of this Position.  # noqa: E501
        :type: float
        """

        self._cf_buy_avg_price = cf_buy_avg_price

    @property
    def cf_sell_avg_price(self):
        """Gets the cf_sell_avg_price of this Position.  # noqa: E501


        :return: The cf_sell_avg_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._cf_sell_avg_price

    @cf_sell_avg_price.setter
    def cf_sell_avg_price(self, cf_sell_avg_price):
        """Sets the cf_sell_avg_price of this Position.


        :param cf_sell_avg_price: The cf_sell_avg_price of this Position.  # noqa: E501
        :type: float
        """

        self._cf_sell_avg_price = cf_sell_avg_price

    @property
    def buy_amt(self):
        """Gets the buy_amt of this Position.  # noqa: E501


        :return: The buy_amt of this Position.  # noqa: E501
        :rtype: float
        """
        return self._buy_amt

    @buy_amt.setter
    def buy_amt(self, buy_amt):
        """Sets the buy_amt of this Position.


        :param buy_amt: The buy_amt of this Position.  # noqa: E501
        :type: float
        """

        self._buy_amt = buy_amt

    @property
    def sell_amt(self):
        """Gets the sell_amt of this Position.  # noqa: E501


        :return: The sell_amt of this Position.  # noqa: E501
        :rtype: float
        """
        return self._sell_amt

    @sell_amt.setter
    def sell_amt(self, sell_amt):
        """Sets the sell_amt of this Position.


        :param sell_amt: The sell_amt of this Position.  # noqa: E501
        :type: float
        """

        self._sell_amt = sell_amt

    @property
    def cf_buy_amt(self):
        """Gets the cf_buy_amt of this Position.  # noqa: E501


        :return: The cf_buy_amt of this Position.  # noqa: E501
        :rtype: float
        """
        return self._cf_buy_amt

    @cf_buy_amt.setter
    def cf_buy_amt(self, cf_buy_amt):
        """Sets the cf_buy_amt of this Position.


        :param cf_buy_amt: The cf_buy_amt of this Position.  # noqa: E501
        :type: float
        """

        self._cf_buy_amt = cf_buy_amt

    @property
    def cf_sell_amt(self):
        """Gets the cf_sell_amt of this Position.  # noqa: E501


        :return: The cf_sell_amt of this Position.  # noqa: E501
        :rtype: float
        """
        return self._cf_sell_amt

    @cf_sell_amt.setter
    def cf_sell_amt(self, cf_sell_amt):
        """Sets the cf_sell_amt of this Position.


        :param cf_sell_amt: The cf_sell_amt of this Position.  # noqa: E501
        :type: float
        """

        self._cf_sell_amt = cf_sell_amt

    @property
    def avg_price(self):
        """Gets the avg_price of this Position.  # noqa: E501


        :return: The avg_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price):
        """Sets the avg_price of this Position.


        :param avg_price: The avg_price of this Position.  # noqa: E501
        :type: float
        """

        self._avg_price = avg_price

    @property
    def und_asset(self):
        """Gets the und_asset of this Position.  # noqa: E501


        :return: The und_asset of this Position.  # noqa: E501
        :rtype: str
        """
        return self._und_asset

    @und_asset.setter
    def und_asset(self, und_asset):
        """Sets the und_asset of this Position.


        :param und_asset: The und_asset of this Position.  # noqa: E501
        :type: str
        """

        self._und_asset = und_asset

    @property
    def square_off(self):
        """Gets the square_off of this Position.  # noqa: E501


        :return: The square_off of this Position.  # noqa: E501
        :rtype: bool
        """
        return self._square_off

    @square_off.setter
    def square_off(self, square_off):
        """Sets the square_off of this Position.


        :param square_off: The square_off of this Position.  # noqa: E501
        :type: bool
        """

        self._square_off = square_off

    @property
    def transferable(self):
        """Gets the transferable of this Position.  # noqa: E501


        :return: The transferable of this Position.  # noqa: E501
        :rtype: bool
        """
        return self._transferable

    @transferable.setter
    def transferable(self, transferable):
        """Sets the transferable of this Position.


        :param transferable: The transferable of this Position.  # noqa: E501
        :type: bool
        """

        self._transferable = transferable

    @property
    def ord_action(self):
        """Gets the ord_action of this Position.  # noqa: E501


        :return: The ord_action of this Position.  # noqa: E501
        :rtype: str
        """
        return self._ord_action

    @ord_action.setter
    def ord_action(self, ord_action):
        """Sets the ord_action of this Position.


        :param ord_action: The ord_action of this Position.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUY", "SELL", "SHORT", "NONE"]  # noqa: E501
        if ord_action not in allowed_values:
            raise ValueError(
                "Invalid value for `ord_action` ({0}), must be one of {1}"  # noqa: E501
                .format(ord_action, allowed_values)
            )

        self._ord_action = ord_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Position, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Position):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
