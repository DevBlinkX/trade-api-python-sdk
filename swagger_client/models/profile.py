# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Profile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addresses': 'list[Address]',
        'gender': 'str',
        'turn_over_brokerage_saving': 'str',
        'dpid': 'str',
        'bank_accounts': 'list[BankAccount]',
        'premium_plan_renewed': 'bool',
        'offer_type': 'str',
        'poa_flag': 'bool',
        'in_active_from': 'str',
        'segment': 'str',
        'pan': 'str',
        'plan_end_date': 'str',
        'email': 'str',
        'active_from': 'str',
        'plan_actual_price': 'str',
        'plan_type': 'str',
        'address': 'str',
        'mobile': 'str',
        'ddpi_flag': 'bool',
        'client_code': 'str',
        'dob': 'datetime',
        'name': 'str',
        'show_offer_price': 'bool',
        'repository_type': 'str',
        'plan_start_date': 'str',
        'premium_plan_active': 'bool'
    }

    attribute_map = {
        'addresses': 'addresses',
        'gender': 'gender',
        'turn_over_brokerage_saving': 'turnOverBrokerageSaving',
        'dpid': 'dpid',
        'bank_accounts': 'bankAccounts',
        'premium_plan_renewed': 'premiumPlanRenewed',
        'offer_type': 'offerType',
        'poa_flag': 'poaFlag',
        'in_active_from': 'inActiveFrom',
        'segment': 'segment',
        'pan': 'pan',
        'plan_end_date': 'planEndDate',
        'email': 'email',
        'active_from': 'activeFrom',
        'plan_actual_price': 'planActualPrice',
        'plan_type': 'planType',
        'address': 'address',
        'mobile': 'mobile',
        'ddpi_flag': 'ddpiFlag',
        'client_code': 'clientCode',
        'dob': 'dob',
        'name': 'name',
        'show_offer_price': 'showOfferPrice',
        'repository_type': 'repositoryType',
        'plan_start_date': 'planStartDate',
        'premium_plan_active': 'premiumPlanActive'
    }

    def __init__(self, addresses=None, gender=None, turn_over_brokerage_saving=None, dpid=None, bank_accounts=None, premium_plan_renewed=None, offer_type=None, poa_flag=None, in_active_from=None, segment=None, pan=None, plan_end_date=None, email=None, active_from=None, plan_actual_price=None, plan_type=None, address=None, mobile=None, ddpi_flag=None, client_code=None, dob=None, name=None, show_offer_price=None, repository_type=None, plan_start_date=None, premium_plan_active=None):  # noqa: E501
        """Profile - a model defined in Swagger"""  # noqa: E501
        self._addresses = None
        self._gender = None
        self._turn_over_brokerage_saving = None
        self._dpid = None
        self._bank_accounts = None
        self._premium_plan_renewed = None
        self._offer_type = None
        self._poa_flag = None
        self._in_active_from = None
        self._segment = None
        self._pan = None
        self._plan_end_date = None
        self._email = None
        self._active_from = None
        self._plan_actual_price = None
        self._plan_type = None
        self._address = None
        self._mobile = None
        self._ddpi_flag = None
        self._client_code = None
        self._dob = None
        self._name = None
        self._show_offer_price = None
        self._repository_type = None
        self._plan_start_date = None
        self._premium_plan_active = None
        self.discriminator = None
        if addresses is not None:
            self.addresses = addresses
        if gender is not None:
            self.gender = gender
        if turn_over_brokerage_saving is not None:
            self.turn_over_brokerage_saving = turn_over_brokerage_saving
        if dpid is not None:
            self.dpid = dpid
        if bank_accounts is not None:
            self.bank_accounts = bank_accounts
        if premium_plan_renewed is not None:
            self.premium_plan_renewed = premium_plan_renewed
        if offer_type is not None:
            self.offer_type = offer_type
        if poa_flag is not None:
            self.poa_flag = poa_flag
        if in_active_from is not None:
            self.in_active_from = in_active_from
        if segment is not None:
            self.segment = segment
        if pan is not None:
            self.pan = pan
        if plan_end_date is not None:
            self.plan_end_date = plan_end_date
        if email is not None:
            self.email = email
        if active_from is not None:
            self.active_from = active_from
        if plan_actual_price is not None:
            self.plan_actual_price = plan_actual_price
        if plan_type is not None:
            self.plan_type = plan_type
        if address is not None:
            self.address = address
        if mobile is not None:
            self.mobile = mobile
        if ddpi_flag is not None:
            self.ddpi_flag = ddpi_flag
        if client_code is not None:
            self.client_code = client_code
        if dob is not None:
            self.dob = dob
        if name is not None:
            self.name = name
        if show_offer_price is not None:
            self.show_offer_price = show_offer_price
        if repository_type is not None:
            self.repository_type = repository_type
        if plan_start_date is not None:
            self.plan_start_date = plan_start_date
        if premium_plan_active is not None:
            self.premium_plan_active = premium_plan_active

    @property
    def addresses(self):
        """Gets the addresses of this Profile.  # noqa: E501


        :return: The addresses of this Profile.  # noqa: E501
        :rtype: list[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Profile.


        :param addresses: The addresses of this Profile.  # noqa: E501
        :type: list[Address]
        """

        self._addresses = addresses

    @property
    def gender(self):
        """Gets the gender of this Profile.  # noqa: E501


        :return: The gender of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Profile.


        :param gender: The gender of this Profile.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def turn_over_brokerage_saving(self):
        """Gets the turn_over_brokerage_saving of this Profile.  # noqa: E501


        :return: The turn_over_brokerage_saving of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._turn_over_brokerage_saving

    @turn_over_brokerage_saving.setter
    def turn_over_brokerage_saving(self, turn_over_brokerage_saving):
        """Sets the turn_over_brokerage_saving of this Profile.


        :param turn_over_brokerage_saving: The turn_over_brokerage_saving of this Profile.  # noqa: E501
        :type: str
        """

        self._turn_over_brokerage_saving = turn_over_brokerage_saving

    @property
    def dpid(self):
        """Gets the dpid of this Profile.  # noqa: E501


        :return: The dpid of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._dpid

    @dpid.setter
    def dpid(self, dpid):
        """Sets the dpid of this Profile.


        :param dpid: The dpid of this Profile.  # noqa: E501
        :type: str
        """

        self._dpid = dpid

    @property
    def bank_accounts(self):
        """Gets the bank_accounts of this Profile.  # noqa: E501


        :return: The bank_accounts of this Profile.  # noqa: E501
        :rtype: list[BankAccount]
        """
        return self._bank_accounts

    @bank_accounts.setter
    def bank_accounts(self, bank_accounts):
        """Sets the bank_accounts of this Profile.


        :param bank_accounts: The bank_accounts of this Profile.  # noqa: E501
        :type: list[BankAccount]
        """

        self._bank_accounts = bank_accounts

    @property
    def premium_plan_renewed(self):
        """Gets the premium_plan_renewed of this Profile.  # noqa: E501


        :return: The premium_plan_renewed of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._premium_plan_renewed

    @premium_plan_renewed.setter
    def premium_plan_renewed(self, premium_plan_renewed):
        """Sets the premium_plan_renewed of this Profile.


        :param premium_plan_renewed: The premium_plan_renewed of this Profile.  # noqa: E501
        :type: bool
        """

        self._premium_plan_renewed = premium_plan_renewed

    @property
    def offer_type(self):
        """Gets the offer_type of this Profile.  # noqa: E501


        :return: The offer_type of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._offer_type

    @offer_type.setter
    def offer_type(self, offer_type):
        """Sets the offer_type of this Profile.


        :param offer_type: The offer_type of this Profile.  # noqa: E501
        :type: str
        """

        self._offer_type = offer_type

    @property
    def poa_flag(self):
        """Gets the poa_flag of this Profile.  # noqa: E501


        :return: The poa_flag of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._poa_flag

    @poa_flag.setter
    def poa_flag(self, poa_flag):
        """Sets the poa_flag of this Profile.


        :param poa_flag: The poa_flag of this Profile.  # noqa: E501
        :type: bool
        """

        self._poa_flag = poa_flag

    @property
    def in_active_from(self):
        """Gets the in_active_from of this Profile.  # noqa: E501


        :return: The in_active_from of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._in_active_from

    @in_active_from.setter
    def in_active_from(self, in_active_from):
        """Sets the in_active_from of this Profile.


        :param in_active_from: The in_active_from of this Profile.  # noqa: E501
        :type: str
        """

        self._in_active_from = in_active_from

    @property
    def segment(self):
        """Gets the segment of this Profile.  # noqa: E501


        :return: The segment of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this Profile.


        :param segment: The segment of this Profile.  # noqa: E501
        :type: str
        """

        self._segment = segment

    @property
    def pan(self):
        """Gets the pan of this Profile.  # noqa: E501


        :return: The pan of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this Profile.


        :param pan: The pan of this Profile.  # noqa: E501
        :type: str
        """

        self._pan = pan

    @property
    def plan_end_date(self):
        """Gets the plan_end_date of this Profile.  # noqa: E501


        :return: The plan_end_date of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._plan_end_date

    @plan_end_date.setter
    def plan_end_date(self, plan_end_date):
        """Sets the plan_end_date of this Profile.


        :param plan_end_date: The plan_end_date of this Profile.  # noqa: E501
        :type: str
        """

        self._plan_end_date = plan_end_date

    @property
    def email(self):
        """Gets the email of this Profile.  # noqa: E501


        :return: The email of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Profile.


        :param email: The email of this Profile.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def active_from(self):
        """Gets the active_from of this Profile.  # noqa: E501


        :return: The active_from of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._active_from

    @active_from.setter
    def active_from(self, active_from):
        """Sets the active_from of this Profile.


        :param active_from: The active_from of this Profile.  # noqa: E501
        :type: str
        """

        self._active_from = active_from

    @property
    def plan_actual_price(self):
        """Gets the plan_actual_price of this Profile.  # noqa: E501


        :return: The plan_actual_price of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._plan_actual_price

    @plan_actual_price.setter
    def plan_actual_price(self, plan_actual_price):
        """Sets the plan_actual_price of this Profile.


        :param plan_actual_price: The plan_actual_price of this Profile.  # noqa: E501
        :type: str
        """

        self._plan_actual_price = plan_actual_price

    @property
    def plan_type(self):
        """Gets the plan_type of this Profile.  # noqa: E501


        :return: The plan_type of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this Profile.


        :param plan_type: The plan_type of this Profile.  # noqa: E501
        :type: str
        """

        self._plan_type = plan_type

    @property
    def address(self):
        """Gets the address of this Profile.  # noqa: E501


        :return: The address of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Profile.


        :param address: The address of this Profile.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def mobile(self):
        """Gets the mobile of this Profile.  # noqa: E501


        :return: The mobile of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Profile.


        :param mobile: The mobile of this Profile.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def ddpi_flag(self):
        """Gets the ddpi_flag of this Profile.  # noqa: E501


        :return: The ddpi_flag of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._ddpi_flag

    @ddpi_flag.setter
    def ddpi_flag(self, ddpi_flag):
        """Sets the ddpi_flag of this Profile.


        :param ddpi_flag: The ddpi_flag of this Profile.  # noqa: E501
        :type: bool
        """

        self._ddpi_flag = ddpi_flag

    @property
    def client_code(self):
        """Gets the client_code of this Profile.  # noqa: E501


        :return: The client_code of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._client_code

    @client_code.setter
    def client_code(self, client_code):
        """Sets the client_code of this Profile.


        :param client_code: The client_code of this Profile.  # noqa: E501
        :type: str
        """

        self._client_code = client_code

    @property
    def dob(self):
        """Gets the dob of this Profile.  # noqa: E501


        :return: The dob of this Profile.  # noqa: E501
        :rtype: datetime
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this Profile.


        :param dob: The dob of this Profile.  # noqa: E501
        :type: datetime
        """

        self._dob = dob

    @property
    def name(self):
        """Gets the name of this Profile.  # noqa: E501


        :return: The name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Profile.


        :param name: The name of this Profile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def show_offer_price(self):
        """Gets the show_offer_price of this Profile.  # noqa: E501


        :return: The show_offer_price of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._show_offer_price

    @show_offer_price.setter
    def show_offer_price(self, show_offer_price):
        """Sets the show_offer_price of this Profile.


        :param show_offer_price: The show_offer_price of this Profile.  # noqa: E501
        :type: bool
        """

        self._show_offer_price = show_offer_price

    @property
    def repository_type(self):
        """Gets the repository_type of this Profile.  # noqa: E501


        :return: The repository_type of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """Sets the repository_type of this Profile.


        :param repository_type: The repository_type of this Profile.  # noqa: E501
        :type: str
        """

        self._repository_type = repository_type

    @property
    def plan_start_date(self):
        """Gets the plan_start_date of this Profile.  # noqa: E501


        :return: The plan_start_date of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._plan_start_date

    @plan_start_date.setter
    def plan_start_date(self, plan_start_date):
        """Sets the plan_start_date of this Profile.


        :param plan_start_date: The plan_start_date of this Profile.  # noqa: E501
        :type: str
        """

        self._plan_start_date = plan_start_date

    @property
    def premium_plan_active(self):
        """Gets the premium_plan_active of this Profile.  # noqa: E501


        :return: The premium_plan_active of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._premium_plan_active

    @premium_plan_active.setter
    def premium_plan_active(self, premium_plan_active):
        """Sets the premium_plan_active of this Profile.


        :param premium_plan_active: The premium_plan_active of this Profile.  # noqa: E501
        :type: bool
        """

        self._premium_plan_active = premium_plan_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Profile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
