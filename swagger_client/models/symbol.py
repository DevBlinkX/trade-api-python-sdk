# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Symbol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'freeze_qty': 'str',
        'symbol': 'str',
        'disp_sym': 'str',
        'exc_tkn': 'float',
        'lot_size': 'float',
        'fno': 'bool',
        'multiplier': 'str',
        'company_name': 'str',
        'stream_sym': 'str',
        'instrument': 'str',
        'tick_size': 'str',
        'expiry_date': 'str',
        'option_type': 'str',
        'exc': 'str',
        'series': 'str',
        'segment': 'str',
        'base_sym': 'str',
        'isin': 'str',
        'strike_price': 'float',
        'mtf': 'bool'
    }

    attribute_map = {
        'freeze_qty': 'freezeQty',
        'symbol': 'symbol',
        'disp_sym': 'dispSym',
        'exc_tkn': 'excTkn',
        'lot_size': 'lotSize',
        'fno': 'fno',
        'multiplier': 'multiplier',
        'company_name': 'companyName',
        'stream_sym': 'streamSym',
        'instrument': 'instrument',
        'tick_size': 'tickSize',
        'expiry_date': 'expiryDate',
        'option_type': 'optionType',
        'exc': 'exc',
        'series': 'series',
        'segment': 'segment',
        'base_sym': 'baseSym',
        'isin': 'isin',
        'strike_price': 'strikePrice',
        'mtf': 'mtf'
    }

    def __init__(self, freeze_qty=None, symbol=None, disp_sym=None, exc_tkn=None, lot_size=None, fno=None, multiplier=None, company_name=None, stream_sym=None, instrument=None, tick_size=None, expiry_date=None, option_type=None, exc=None, series=None, segment=None, base_sym=None, isin=None, strike_price=None, mtf=None):  # noqa: E501
        """Symbol - a model defined in Swagger"""  # noqa: E501
        self._freeze_qty = None
        self._symbol = None
        self._disp_sym = None
        self._exc_tkn = None
        self._lot_size = None
        self._fno = None
        self._multiplier = None
        self._company_name = None
        self._stream_sym = None
        self._instrument = None
        self._tick_size = None
        self._expiry_date = None
        self._option_type = None
        self._exc = None
        self._series = None
        self._segment = None
        self._base_sym = None
        self._isin = None
        self._strike_price = None
        self._mtf = None
        self.discriminator = None
        if freeze_qty is not None:
            self.freeze_qty = freeze_qty
        if symbol is not None:
            self.symbol = symbol
        if disp_sym is not None:
            self.disp_sym = disp_sym
        if exc_tkn is not None:
            self.exc_tkn = exc_tkn
        if lot_size is not None:
            self.lot_size = lot_size
        if fno is not None:
            self.fno = fno
        if multiplier is not None:
            self.multiplier = multiplier
        if company_name is not None:
            self.company_name = company_name
        if stream_sym is not None:
            self.stream_sym = stream_sym
        if instrument is not None:
            self.instrument = instrument
        if tick_size is not None:
            self.tick_size = tick_size
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if option_type is not None:
            self.option_type = option_type
        if exc is not None:
            self.exc = exc
        if series is not None:
            self.series = series
        if segment is not None:
            self.segment = segment
        if base_sym is not None:
            self.base_sym = base_sym
        if isin is not None:
            self.isin = isin
        if strike_price is not None:
            self.strike_price = strike_price
        if mtf is not None:
            self.mtf = mtf

    @property
    def freeze_qty(self):
        """Gets the freeze_qty of this Symbol.  # noqa: E501


        :return: The freeze_qty of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._freeze_qty

    @freeze_qty.setter
    def freeze_qty(self, freeze_qty):
        """Sets the freeze_qty of this Symbol.


        :param freeze_qty: The freeze_qty of this Symbol.  # noqa: E501
        :type: str
        """

        self._freeze_qty = freeze_qty

    @property
    def symbol(self):
        """Gets the symbol of this Symbol.  # noqa: E501


        :return: The symbol of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Symbol.


        :param symbol: The symbol of this Symbol.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def disp_sym(self):
        """Gets the disp_sym of this Symbol.  # noqa: E501


        :return: The disp_sym of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._disp_sym

    @disp_sym.setter
    def disp_sym(self, disp_sym):
        """Sets the disp_sym of this Symbol.


        :param disp_sym: The disp_sym of this Symbol.  # noqa: E501
        :type: str
        """

        self._disp_sym = disp_sym

    @property
    def exc_tkn(self):
        """Gets the exc_tkn of this Symbol.  # noqa: E501


        :return: The exc_tkn of this Symbol.  # noqa: E501
        :rtype: float
        """
        return self._exc_tkn

    @exc_tkn.setter
    def exc_tkn(self, exc_tkn):
        """Sets the exc_tkn of this Symbol.


        :param exc_tkn: The exc_tkn of this Symbol.  # noqa: E501
        :type: float
        """

        self._exc_tkn = exc_tkn

    @property
    def lot_size(self):
        """Gets the lot_size of this Symbol.  # noqa: E501


        :return: The lot_size of this Symbol.  # noqa: E501
        :rtype: float
        """
        return self._lot_size

    @lot_size.setter
    def lot_size(self, lot_size):
        """Sets the lot_size of this Symbol.


        :param lot_size: The lot_size of this Symbol.  # noqa: E501
        :type: float
        """

        self._lot_size = lot_size

    @property
    def fno(self):
        """Gets the fno of this Symbol.  # noqa: E501


        :return: The fno of this Symbol.  # noqa: E501
        :rtype: bool
        """
        return self._fno

    @fno.setter
    def fno(self, fno):
        """Sets the fno of this Symbol.


        :param fno: The fno of this Symbol.  # noqa: E501
        :type: bool
        """

        self._fno = fno

    @property
    def multiplier(self):
        """Gets the multiplier of this Symbol.  # noqa: E501


        :return: The multiplier of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """Sets the multiplier of this Symbol.


        :param multiplier: The multiplier of this Symbol.  # noqa: E501
        :type: str
        """

        self._multiplier = multiplier

    @property
    def company_name(self):
        """Gets the company_name of this Symbol.  # noqa: E501


        :return: The company_name of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Symbol.


        :param company_name: The company_name of this Symbol.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def stream_sym(self):
        """Gets the stream_sym of this Symbol.  # noqa: E501


        :return: The stream_sym of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._stream_sym

    @stream_sym.setter
    def stream_sym(self, stream_sym):
        """Sets the stream_sym of this Symbol.


        :param stream_sym: The stream_sym of this Symbol.  # noqa: E501
        :type: str
        """

        self._stream_sym = stream_sym

    @property
    def instrument(self):
        """Gets the instrument of this Symbol.  # noqa: E501


        :return: The instrument of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this Symbol.


        :param instrument: The instrument of this Symbol.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def tick_size(self):
        """Gets the tick_size of this Symbol.  # noqa: E501


        :return: The tick_size of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._tick_size

    @tick_size.setter
    def tick_size(self, tick_size):
        """Sets the tick_size of this Symbol.


        :param tick_size: The tick_size of this Symbol.  # noqa: E501
        :type: str
        """

        self._tick_size = tick_size

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Symbol.  # noqa: E501


        :return: The expiry_date of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Symbol.


        :param expiry_date: The expiry_date of this Symbol.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def option_type(self):
        """Gets the option_type of this Symbol.  # noqa: E501


        :return: The option_type of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._option_type

    @option_type.setter
    def option_type(self, option_type):
        """Sets the option_type of this Symbol.


        :param option_type: The option_type of this Symbol.  # noqa: E501
        :type: str
        """

        self._option_type = option_type

    @property
    def exc(self):
        """Gets the exc of this Symbol.  # noqa: E501


        :return: The exc of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._exc

    @exc.setter
    def exc(self, exc):
        """Sets the exc of this Symbol.


        :param exc: The exc of this Symbol.  # noqa: E501
        :type: str
        """

        self._exc = exc

    @property
    def series(self):
        """Gets the series of this Symbol.  # noqa: E501


        :return: The series of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this Symbol.


        :param series: The series of this Symbol.  # noqa: E501
        :type: str
        """

        self._series = series

    @property
    def segment(self):
        """Gets the segment of this Symbol.  # noqa: E501


        :return: The segment of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this Symbol.


        :param segment: The segment of this Symbol.  # noqa: E501
        :type: str
        """

        self._segment = segment

    @property
    def base_sym(self):
        """Gets the base_sym of this Symbol.  # noqa: E501


        :return: The base_sym of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._base_sym

    @base_sym.setter
    def base_sym(self, base_sym):
        """Sets the base_sym of this Symbol.


        :param base_sym: The base_sym of this Symbol.  # noqa: E501
        :type: str
        """

        self._base_sym = base_sym

    @property
    def isin(self):
        """Gets the isin of this Symbol.  # noqa: E501


        :return: The isin of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this Symbol.


        :param isin: The isin of this Symbol.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def strike_price(self):
        """Gets the strike_price of this Symbol.  # noqa: E501


        :return: The strike_price of this Symbol.  # noqa: E501
        :rtype: float
        """
        return self._strike_price

    @strike_price.setter
    def strike_price(self, strike_price):
        """Sets the strike_price of this Symbol.


        :param strike_price: The strike_price of this Symbol.  # noqa: E501
        :type: float
        """

        self._strike_price = strike_price

    @property
    def mtf(self):
        """Gets the mtf of this Symbol.  # noqa: E501


        :return: The mtf of this Symbol.  # noqa: E501
        :rtype: bool
        """
        return self._mtf

    @mtf.setter
    def mtf(self, mtf):
        """Sets the mtf of this Symbol.


        :param mtf: The mtf of this Symbol.  # noqa: E501
        :type: bool
        """

        self._mtf = mtf

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Symbol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Symbol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
