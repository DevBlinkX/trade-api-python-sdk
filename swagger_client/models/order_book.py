# coding: utf-8

"""
    portfolio-services Api Doc

    Rest APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sales@marketsimplified.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class OrderBook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'SymbolDto',
        'ord_id': 'str',
        'exch_ord_id': 'str',
        'par_ord_id': 'str',
        'status': 'str',
        'ord_action': 'str',
        'ord_type': 'str',
        'prd_type': 'str',
        'ord_validity': 'str',
        'modified_by': 'str',
        'price': 'float',
        'trigger_price': 'float',
        'avg_price': 'float',
        'remarks': 'str',
        'rej_reason': 'str',
        'ord_date': 'str',
        'exc_ord_time': 'str',
        'bo_ord_status': 'str',
        'exitable': 'str',
        'qty': 'int',
        'dis_qty': 'int',
        'traded_qty': 'int',
        'remain_qty': 'int',
        'cancelled_qty': 'int',
        'mkt_pro': 'str',
        'und_asset': 'str',
        'amo': 'bool',
        'modifiable': 'bool',
        'cancellable': 'bool'
    }

    attribute_map = {
        'symbol': 'symbol',
        'ord_id': 'ordId',
        'exch_ord_id': 'exchOrdId',
        'par_ord_id': 'parOrdId',
        'status': 'status',
        'ord_action': 'ordAction',
        'ord_type': 'ordType',
        'prd_type': 'prdType',
        'ord_validity': 'ordValidity',
        'modified_by': 'modifiedBy',
        'price': 'price',
        'trigger_price': 'triggerPrice',
        'avg_price': 'avgPrice',
        'remarks': 'remarks',
        'rej_reason': 'rejReason',
        'ord_date': 'ordDate',
        'exc_ord_time': 'excOrdTime',
        'bo_ord_status': 'boOrdStatus',
        'exitable': 'exitable',
        'qty': 'qty',
        'dis_qty': 'disQty',
        'traded_qty': 'tradedQty',
        'remain_qty': 'remainQty',
        'cancelled_qty': 'cancelledQty',
        'mkt_pro': 'mktPro',
        'und_asset': 'undAsset',
        'amo': 'amo',
        'modifiable': 'modifiable',
        'cancellable': 'cancellable'
    }

    def __init__(self, symbol=None, ord_id=None, exch_ord_id=None, par_ord_id=None, status=None, ord_action=None,
                 ord_type=None, prd_type=None, ord_validity=None, modified_by=None, price=None, trigger_price=None,
                 avg_price=None, remarks=None, rej_reason=None, ord_date=None, exc_ord_time=None, bo_ord_status=None,
                 exitable=None, qty=None, dis_qty=None, traded_qty=None, remain_qty=None, cancelled_qty=None,
                 mkt_pro=None, und_asset=None, amo=None, modifiable=None, cancellable=None):  # noqa: E501
        """OrderBook - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._ord_id = None
        self._exch_ord_id = None
        self._par_ord_id = None
        self._status = None
        self._ord_action = None
        self._ord_type = None
        self._prd_type = None
        self._ord_validity = None
        self._modified_by = None
        self._price = None
        self._trigger_price = None
        self._avg_price = None
        self._remarks = None
        self._rej_reason = None
        self._ord_date = None
        self._exc_ord_time = None
        self._bo_ord_status = None
        self._exitable = None
        self._qty = None
        self._dis_qty = None
        self._traded_qty = None
        self._remain_qty = None
        self._cancelled_qty = None
        self._mkt_pro = None
        self._und_asset = None
        self._amo = None
        self._modifiable = None
        self._cancellable = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if ord_id is not None:
            self.ord_id = ord_id
        if exch_ord_id is not None:
            self.exch_ord_id = exch_ord_id
        if par_ord_id is not None:
            self.par_ord_id = par_ord_id
        if status is not None:
            self.status = status
        if ord_action is not None:
            self.ord_action = ord_action
        if ord_type is not None:
            self.ord_type = ord_type
        if prd_type is not None:
            self.prd_type = prd_type
        if ord_validity is not None:
            self.ord_validity = ord_validity
        if modified_by is not None:
            self.modified_by = modified_by
        if price is not None:
            self.price = price
        if trigger_price is not None:
            self.trigger_price = trigger_price
        if avg_price is not None:
            self.avg_price = avg_price
        if remarks is not None:
            self.remarks = remarks
        if rej_reason is not None:
            self.rej_reason = rej_reason
        if ord_date is not None:
            self.ord_date = ord_date
        if exc_ord_time is not None:
            self.exc_ord_time = exc_ord_time
        if bo_ord_status is not None:
            self.bo_ord_status = bo_ord_status
        if exitable is not None:
            self.exitable = exitable
        if qty is not None:
            self.qty = qty
        if dis_qty is not None:
            self.dis_qty = dis_qty
        if traded_qty is not None:
            self.traded_qty = traded_qty
        if remain_qty is not None:
            self.remain_qty = remain_qty
        if cancelled_qty is not None:
            self.cancelled_qty = cancelled_qty
        if mkt_pro is not None:
            self.mkt_pro = mkt_pro
        if und_asset is not None:
            self.und_asset = und_asset
        if amo is not None:
            self.amo = amo
        if modifiable is not None:
            self.modifiable = modifiable
        if cancellable is not None:
            self.cancellable = cancellable

    @property
    def symbol(self):
        """Gets the symbol of this OrderBook.  # noqa: E501


        :return: The symbol of this OrderBook.  # noqa: E501
        :rtype: SymbolDto
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this OrderBook.


        :param symbol: The symbol of this OrderBook.  # noqa: E501
        :type: SymbolDto
        """

        self._symbol = symbol

    @property
    def ord_id(self):
        """Gets the ord_id of this OrderBook.  # noqa: E501


        :return: The ord_id of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._ord_id

    @ord_id.setter
    def ord_id(self, ord_id):
        """Sets the ord_id of this OrderBook.


        :param ord_id: The ord_id of this OrderBook.  # noqa: E501
        :type: str
        """

        self._ord_id = ord_id

    @property
    def exch_ord_id(self):
        """Gets the exch_ord_id of this OrderBook.  # noqa: E501


        :return: The exch_ord_id of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._exch_ord_id

    @exch_ord_id.setter
    def exch_ord_id(self, exch_ord_id):
        """Sets the exch_ord_id of this OrderBook.


        :param exch_ord_id: The exch_ord_id of this OrderBook.  # noqa: E501
        :type: str
        """

        self._exch_ord_id = exch_ord_id

    @property
    def par_ord_id(self):
        """Gets the par_ord_id of this OrderBook.  # noqa: E501


        :return: The par_ord_id of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._par_ord_id

    @par_ord_id.setter
    def par_ord_id(self, par_ord_id):
        """Sets the par_ord_id of this OrderBook.


        :param par_ord_id: The par_ord_id of this OrderBook.  # noqa: E501
        :type: str
        """

        self._par_ord_id = par_ord_id

    @property
    def status(self):
        """Gets the status of this OrderBook.  # noqa: E501


        :return: The status of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderBook.


        :param status: The status of this OrderBook.  # noqa: E501
        :type: str
        """
        allowed_values = ["Executed", "Pending", "Cancelled", "Transit", "Rejected", "Requested", "None"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def ord_action(self):
        """Gets the ord_action of this OrderBook.  # noqa: E501


        :return: The ord_action of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._ord_action

    @ord_action.setter
    def ord_action(self, ord_action):
        """Sets the ord_action of this OrderBook.


        :param ord_action: The ord_action of this OrderBook.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUY", "SELL", "SHORT", "NONE"]  # noqa: E501
        if ord_action not in allowed_values:
            raise ValueError(
                "Invalid value for `ord_action` ({0}), must be one of {1}"  # noqa: E501
                .format(ord_action, allowed_values)
            )

        self._ord_action = ord_action

    @property
    def ord_type(self):
        """Gets the ord_type of this OrderBook.  # noqa: E501


        :return: The ord_type of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._ord_type

    @ord_type.setter
    def ord_type(self, ord_type):
        """Sets the ord_type of this OrderBook.


        :param ord_type: The ord_type of this OrderBook.  # noqa: E501
        :type: str
        """
        allowed_values = ["Market", "Limit", "Stop", "Stop-loss", "SL-M", "SL", "None"]  # noqa: E501
        if ord_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ord_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ord_type, allowed_values)
            )

        self._ord_type = ord_type

    @property
    def prd_type(self):
        """Gets the prd_type of this OrderBook.  # noqa: E501


        :return: The prd_type of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._prd_type

    @prd_type.setter
    def prd_type(self, prd_type):
        """Sets the prd_type of this OrderBook.


        :param prd_type: The prd_type of this OrderBook.  # noqa: E501
        :type: str
        """
        allowed_values = ["CASH", "MTF", "INTRADAY", "MARGIN", "SHORTSELL", "COVER_ORDER", "BRACKET_ORDER", "NRML",
                          "TNC", "DELIVERY", "NONE"]  # noqa: E501
        if prd_type not in allowed_values:
            raise ValueError(
                "Invalid value for `prd_type` ({0}), must be one of {1}"  # noqa: E501
                .format(prd_type, allowed_values)
            )

        self._prd_type = prd_type

    @property
    def ord_validity(self):
        """Gets the ord_validity of this OrderBook.  # noqa: E501


        :return: The ord_validity of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._ord_validity

    @ord_validity.setter
    def ord_validity(self, ord_validity):
        """Sets the ord_validity of this OrderBook.


        :param ord_validity: The ord_validity of this OrderBook.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAY", "IOC", "GMT", "GTC", "AMO", "GTD", "NONE"]  # noqa: E501
        if ord_validity not in allowed_values:
            raise ValueError(
                "Invalid value for `ord_validity` ({0}), must be one of {1}"  # noqa: E501
                .format(ord_validity, allowed_values)
            )

        self._ord_validity = ord_validity

    @property
    def modified_by(self):
        """Gets the modified_by of this OrderBook.  # noqa: E501


        :return: The modified_by of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this OrderBook.


        :param modified_by: The modified_by of this OrderBook.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def price(self):
        """Gets the price of this OrderBook.  # noqa: E501


        :return: The price of this OrderBook.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderBook.


        :param price: The price of this OrderBook.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def trigger_price(self):
        """Gets the trigger_price of this OrderBook.  # noqa: E501


        :return: The trigger_price of this OrderBook.  # noqa: E501
        :rtype: float
        """
        return self._trigger_price

    @trigger_price.setter
    def trigger_price(self, trigger_price):
        """Sets the trigger_price of this OrderBook.


        :param trigger_price: The trigger_price of this OrderBook.  # noqa: E501
        :type: float
        """

        self._trigger_price = trigger_price

    @property
    def avg_price(self):
        """Gets the avg_price of this OrderBook.  # noqa: E501


        :return: The avg_price of this OrderBook.  # noqa: E501
        :rtype: float
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price):
        """Sets the avg_price of this OrderBook.


        :param avg_price: The avg_price of this OrderBook.  # noqa: E501
        :type: float
        """

        self._avg_price = avg_price

    @property
    def remarks(self):
        """Gets the remarks of this OrderBook.  # noqa: E501


        :return: The remarks of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this OrderBook.


        :param remarks: The remarks of this OrderBook.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def rej_reason(self):
        """Gets the rej_reason of this OrderBook.  # noqa: E501


        :return: The rej_reason of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._rej_reason

    @rej_reason.setter
    def rej_reason(self, rej_reason):
        """Sets the rej_reason of this OrderBook.


        :param rej_reason: The rej_reason of this OrderBook.  # noqa: E501
        :type: str
        """

        self._rej_reason = rej_reason

    @property
    def ord_date(self):
        """Gets the ord_date of this OrderBook.  # noqa: E501


        :return: The ord_date of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._ord_date

    @ord_date.setter
    def ord_date(self, ord_date):
        """Sets the ord_date of this OrderBook.


        :param ord_date: The ord_date of this OrderBook.  # noqa: E501
        :type: str
        """

        self._ord_date = ord_date

    @property
    def exc_ord_time(self):
        """Gets the exc_ord_time of this OrderBook.  # noqa: E501


        :return: The exc_ord_time of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._exc_ord_time

    @exc_ord_time.setter
    def exc_ord_time(self, exc_ord_time):
        """Sets the exc_ord_time of this OrderBook.


        :param exc_ord_time: The exc_ord_time of this OrderBook.  # noqa: E501
        :type: str
        """

        self._exc_ord_time = exc_ord_time

    @property
    def bo_ord_status(self):
        """Gets the bo_ord_status of this OrderBook.  # noqa: E501


        :return: The bo_ord_status of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._bo_ord_status

    @bo_ord_status.setter
    def bo_ord_status(self, bo_ord_status):
        """Sets the bo_ord_status of this OrderBook.


        :param bo_ord_status: The bo_ord_status of this OrderBook.  # noqa: E501
        :type: str
        """

        self._bo_ord_status = bo_ord_status

    @property
    def exitable(self):
        """Gets the exitable of this OrderBook.  # noqa: E501


        :return: The exitable of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._exitable

    @exitable.setter
    def exitable(self, exitable):
        """Sets the exitable of this OrderBook.


        :param exitable: The exitable of this OrderBook.  # noqa: E501
        :type: str
        """

        self._exitable = exitable

    @property
    def qty(self):
        """Gets the qty of this OrderBook.  # noqa: E501


        :return: The qty of this OrderBook.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this OrderBook.


        :param qty: The qty of this OrderBook.  # noqa: E501
        :type: int
        """

        self._qty = qty

    @property
    def dis_qty(self):
        """Gets the dis_qty of this OrderBook.  # noqa: E501


        :return: The dis_qty of this OrderBook.  # noqa: E501
        :rtype: int
        """
        return self._dis_qty

    @dis_qty.setter
    def dis_qty(self, dis_qty):
        """Sets the dis_qty of this OrderBook.


        :param dis_qty: The dis_qty of this OrderBook.  # noqa: E501
        :type: int
        """

        self._dis_qty = dis_qty

    @property
    def traded_qty(self):
        """Gets the traded_qty of this OrderBook.  # noqa: E501


        :return: The traded_qty of this OrderBook.  # noqa: E501
        :rtype: int
        """
        return self._traded_qty

    @traded_qty.setter
    def traded_qty(self, traded_qty):
        """Sets the traded_qty of this OrderBook.


        :param traded_qty: The traded_qty of this OrderBook.  # noqa: E501
        :type: int
        """

        self._traded_qty = traded_qty

    @property
    def remain_qty(self):
        """Gets the remain_qty of this OrderBook.  # noqa: E501


        :return: The remain_qty of this OrderBook.  # noqa: E501
        :rtype: int
        """
        return self._remain_qty

    @remain_qty.setter
    def remain_qty(self, remain_qty):
        """Sets the remain_qty of this OrderBook.


        :param remain_qty: The remain_qty of this OrderBook.  # noqa: E501
        :type: int
        """

        self._remain_qty = remain_qty

    @property
    def cancelled_qty(self):
        """Gets the cancelled_qty of this OrderBook.  # noqa: E501


        :return: The cancelled_qty of this OrderBook.  # noqa: E501
        :rtype: int
        """
        return self._cancelled_qty

    @cancelled_qty.setter
    def cancelled_qty(self, cancelled_qty):
        """Sets the cancelled_qty of this OrderBook.


        :param cancelled_qty: The cancelled_qty of this OrderBook.  # noqa: E501
        :type: int
        """

        self._cancelled_qty = cancelled_qty

    @property
    def mkt_pro(self):
        """Gets the mkt_pro of this OrderBook.  # noqa: E501


        :return: The mkt_pro of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._mkt_pro

    @mkt_pro.setter
    def mkt_pro(self, mkt_pro):
        """Sets the mkt_pro of this OrderBook.


        :param mkt_pro: The mkt_pro of this OrderBook.  # noqa: E501
        :type: str
        """

        self._mkt_pro = mkt_pro

    @property
    def und_asset(self):
        """Gets the und_asset of this OrderBook.  # noqa: E501


        :return: The und_asset of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._und_asset

    @und_asset.setter
    def und_asset(self, und_asset):
        """Sets the und_asset of this OrderBook.


        :param und_asset: The und_asset of this OrderBook.  # noqa: E501
        :type: str
        """

        self._und_asset = und_asset

    @property
    def amo(self):
        """Gets the amo of this OrderBook.  # noqa: E501


        :return: The amo of this OrderBook.  # noqa: E501
        :rtype: bool
        """
        return self._amo

    @amo.setter
    def amo(self, amo):
        """Sets the amo of this OrderBook.


        :param amo: The amo of this OrderBook.  # noqa: E501
        :type: bool
        """

        self._amo = amo

    @property
    def modifiable(self):
        """Gets the modifiable of this OrderBook.  # noqa: E501


        :return: The modifiable of this OrderBook.  # noqa: E501
        :rtype: bool
        """
        return self._modifiable

    @modifiable.setter
    def modifiable(self, modifiable):
        """Sets the modifiable of this OrderBook.


        :param modifiable: The modifiable of this OrderBook.  # noqa: E501
        :type: bool
        """

        self._modifiable = modifiable

    @property
    def cancellable(self):
        """Gets the cancellable of this OrderBook.  # noqa: E501


        :return: The cancellable of this OrderBook.  # noqa: E501
        :rtype: bool
        """
        return self._cancellable

    @cancellable.setter
    def cancellable(self, cancellable):
        """Sets the cancellable of this OrderBook.


        :param cancellable: The cancellable of this OrderBook.  # noqa: E501
        :type: bool
        """

        self._cancellable = cancellable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderBook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderBook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
