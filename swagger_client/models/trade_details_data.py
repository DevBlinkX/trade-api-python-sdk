# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TradeDetailsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'und_asset': 'str',
        'exc_ord_time': 'str',
        'ord_action': 'str',
        'cancelled_qty': 'str',
        'is_amo': 'bool',
        'avg_price': 'str',
        'exitable': 'bool',
        'company_name': 'str',
        'bo_ord_status': 'str',
        'ord_id': 'str',
        'cancellable': 'bool',
        'exc_token': 'str',
        'option_type': 'str',
        'exc': 'str',
        'ord_date': 'str',
        'prd_type': 'str',
        'modified_by': 'str',
        'base_sym': 'str',
        'expiry': 'str',
        'modifiable': 'bool',
        'ord_status': 'str',
        'disp_sym': 'str',
        'ord_duration': 'str',
        'child_type': 'str',
        'instrument_type': 'str',
        'trigger_price': 'str',
        'limit_price': 'str',
        'lot_size': 'str',
        'multipleir': 'str',
        'strike': 'str',
        'dis_qty': 'str',
        'par_ord_id': 'str',
        'mkt_pro': 'str',
        'traded_qty': 'str',
        'remain_qty': 'str',
        'rej_reason': 'str',
        'qty': 'str',
        'exch_ord_id': 'str',
        'ord_type': 'str',
        'remarks': 'str',
        'tr_sym': 'str',
        'status': 'str',
        'traded_price': 'str',
        'exch_trd_id': 'str',
        'trade_time': 'str'
    }

    attribute_map = {
        'und_asset': 'undAsset',
        'exc_ord_time': 'excOrdTime',
        'ord_action': 'ordAction',
        'cancelled_qty': 'cancelledQty',
        'is_amo': 'isAmo',
        'avg_price': 'avgPrice',
        'exitable': 'exitable',
        'company_name': 'companyName',
        'bo_ord_status': 'boOrdStatus',
        'ord_id': 'ordId',
        'cancellable': 'cancellable',
        'exc_token': 'excToken',
        'option_type': 'optionType',
        'exc': 'exc',
        'ord_date': 'ordDate',
        'prd_type': 'prdType',
        'modified_by': 'modifiedBy',
        'base_sym': 'baseSym',
        'expiry': 'expiry',
        'modifiable': 'modifiable',
        'ord_status': 'ordStatus',
        'disp_sym': 'dispSym',
        'ord_duration': 'ordDuration',
        'child_type': 'childType',
        'instrument_type': 'instrumentType',
        'trigger_price': 'triggerPrice',
        'limit_price': 'limitPrice',
        'lot_size': 'lotSize',
        'multipleir': 'multipleir',
        'strike': 'strike',
        'dis_qty': 'disQty',
        'par_ord_id': 'parOrdId',
        'mkt_pro': 'mktPro',
        'traded_qty': 'tradedQty',
        'remain_qty': 'remainQty',
        'rej_reason': 'rejReason',
        'qty': 'qty',
        'exch_ord_id': 'exchOrdId',
        'ord_type': 'ordType',
        'remarks': 'remarks',
        'tr_sym': 'trSym',
        'status': 'status',
        'traded_price': 'tradedPrice',
        'exch_trd_id': 'exchTrdId',
        'trade_time': 'tradeTime'
    }

    def __init__(self, und_asset=None, exc_ord_time=None, ord_action=None, cancelled_qty=None, is_amo=None, avg_price=None, exitable=None, company_name=None, bo_ord_status=None, ord_id=None, cancellable=None, exc_token=None, option_type=None, exc=None, ord_date=None, prd_type=None, modified_by=None, base_sym=None, expiry=None, modifiable=None, ord_status=None, disp_sym=None, ord_duration=None, child_type=None, instrument_type=None, trigger_price=None, limit_price=None, lot_size=None, multipleir=None, strike=None, dis_qty=None, par_ord_id=None, mkt_pro=None, traded_qty=None, remain_qty=None, rej_reason=None, qty=None, exch_ord_id=None, ord_type=None, remarks=None, tr_sym=None, status=None, traded_price=None, exch_trd_id=None, trade_time=None):  # noqa: E501
        """TradeDetailsData - a model defined in Swagger"""  # noqa: E501
        self._und_asset = None
        self._exc_ord_time = None
        self._ord_action = None
        self._cancelled_qty = None
        self._is_amo = None
        self._avg_price = None
        self._exitable = None
        self._company_name = None
        self._bo_ord_status = None
        self._ord_id = None
        self._cancellable = None
        self._exc_token = None
        self._option_type = None
        self._exc = None
        self._ord_date = None
        self._prd_type = None
        self._modified_by = None
        self._base_sym = None
        self._expiry = None
        self._modifiable = None
        self._ord_status = None
        self._disp_sym = None
        self._ord_duration = None
        self._child_type = None
        self._instrument_type = None
        self._trigger_price = None
        self._limit_price = None
        self._lot_size = None
        self._multipleir = None
        self._strike = None
        self._dis_qty = None
        self._par_ord_id = None
        self._mkt_pro = None
        self._traded_qty = None
        self._remain_qty = None
        self._rej_reason = None
        self._qty = None
        self._exch_ord_id = None
        self._ord_type = None
        self._remarks = None
        self._tr_sym = None
        self._status = None
        self._traded_price = None
        self._exch_trd_id = None
        self._trade_time = None
        self.discriminator = None
        if und_asset is not None:
            self.und_asset = und_asset
        if exc_ord_time is not None:
            self.exc_ord_time = exc_ord_time
        if ord_action is not None:
            self.ord_action = ord_action
        if cancelled_qty is not None:
            self.cancelled_qty = cancelled_qty
        if is_amo is not None:
            self.is_amo = is_amo
        if avg_price is not None:
            self.avg_price = avg_price
        if exitable is not None:
            self.exitable = exitable
        if company_name is not None:
            self.company_name = company_name
        if bo_ord_status is not None:
            self.bo_ord_status = bo_ord_status
        if ord_id is not None:
            self.ord_id = ord_id
        if cancellable is not None:
            self.cancellable = cancellable
        if exc_token is not None:
            self.exc_token = exc_token
        if option_type is not None:
            self.option_type = option_type
        if exc is not None:
            self.exc = exc
        if ord_date is not None:
            self.ord_date = ord_date
        if prd_type is not None:
            self.prd_type = prd_type
        if modified_by is not None:
            self.modified_by = modified_by
        if base_sym is not None:
            self.base_sym = base_sym
        if expiry is not None:
            self.expiry = expiry
        if modifiable is not None:
            self.modifiable = modifiable
        if ord_status is not None:
            self.ord_status = ord_status
        if disp_sym is not None:
            self.disp_sym = disp_sym
        if ord_duration is not None:
            self.ord_duration = ord_duration
        if child_type is not None:
            self.child_type = child_type
        if instrument_type is not None:
            self.instrument_type = instrument_type
        if trigger_price is not None:
            self.trigger_price = trigger_price
        if limit_price is not None:
            self.limit_price = limit_price
        if lot_size is not None:
            self.lot_size = lot_size
        if multipleir is not None:
            self.multipleir = multipleir
        if strike is not None:
            self.strike = strike
        if dis_qty is not None:
            self.dis_qty = dis_qty
        if par_ord_id is not None:
            self.par_ord_id = par_ord_id
        if mkt_pro is not None:
            self.mkt_pro = mkt_pro
        if traded_qty is not None:
            self.traded_qty = traded_qty
        if remain_qty is not None:
            self.remain_qty = remain_qty
        if rej_reason is not None:
            self.rej_reason = rej_reason
        if qty is not None:
            self.qty = qty
        if exch_ord_id is not None:
            self.exch_ord_id = exch_ord_id
        if ord_type is not None:
            self.ord_type = ord_type
        if remarks is not None:
            self.remarks = remarks
        if tr_sym is not None:
            self.tr_sym = tr_sym
        if status is not None:
            self.status = status
        if traded_price is not None:
            self.traded_price = traded_price
        if exch_trd_id is not None:
            self.exch_trd_id = exch_trd_id
        if trade_time is not None:
            self.trade_time = trade_time

    @property
    def und_asset(self):
        """Gets the und_asset of this TradeDetailsData.  # noqa: E501


        :return: The und_asset of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._und_asset

    @und_asset.setter
    def und_asset(self, und_asset):
        """Sets the und_asset of this TradeDetailsData.


        :param und_asset: The und_asset of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._und_asset = und_asset

    @property
    def exc_ord_time(self):
        """Gets the exc_ord_time of this TradeDetailsData.  # noqa: E501


        :return: The exc_ord_time of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._exc_ord_time

    @exc_ord_time.setter
    def exc_ord_time(self, exc_ord_time):
        """Sets the exc_ord_time of this TradeDetailsData.


        :param exc_ord_time: The exc_ord_time of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._exc_ord_time = exc_ord_time

    @property
    def ord_action(self):
        """Gets the ord_action of this TradeDetailsData.  # noqa: E501


        :return: The ord_action of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._ord_action

    @ord_action.setter
    def ord_action(self, ord_action):
        """Sets the ord_action of this TradeDetailsData.


        :param ord_action: The ord_action of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._ord_action = ord_action

    @property
    def cancelled_qty(self):
        """Gets the cancelled_qty of this TradeDetailsData.  # noqa: E501


        :return: The cancelled_qty of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_qty

    @cancelled_qty.setter
    def cancelled_qty(self, cancelled_qty):
        """Sets the cancelled_qty of this TradeDetailsData.


        :param cancelled_qty: The cancelled_qty of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._cancelled_qty = cancelled_qty

    @property
    def is_amo(self):
        """Gets the is_amo of this TradeDetailsData.  # noqa: E501


        :return: The is_amo of this TradeDetailsData.  # noqa: E501
        :rtype: bool
        """
        return self._is_amo

    @is_amo.setter
    def is_amo(self, is_amo):
        """Sets the is_amo of this TradeDetailsData.


        :param is_amo: The is_amo of this TradeDetailsData.  # noqa: E501
        :type: bool
        """

        self._is_amo = is_amo

    @property
    def avg_price(self):
        """Gets the avg_price of this TradeDetailsData.  # noqa: E501


        :return: The avg_price of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price):
        """Sets the avg_price of this TradeDetailsData.


        :param avg_price: The avg_price of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._avg_price = avg_price

    @property
    def exitable(self):
        """Gets the exitable of this TradeDetailsData.  # noqa: E501


        :return: The exitable of this TradeDetailsData.  # noqa: E501
        :rtype: bool
        """
        return self._exitable

    @exitable.setter
    def exitable(self, exitable):
        """Sets the exitable of this TradeDetailsData.


        :param exitable: The exitable of this TradeDetailsData.  # noqa: E501
        :type: bool
        """

        self._exitable = exitable

    @property
    def company_name(self):
        """Gets the company_name of this TradeDetailsData.  # noqa: E501


        :return: The company_name of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this TradeDetailsData.


        :param company_name: The company_name of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def bo_ord_status(self):
        """Gets the bo_ord_status of this TradeDetailsData.  # noqa: E501


        :return: The bo_ord_status of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._bo_ord_status

    @bo_ord_status.setter
    def bo_ord_status(self, bo_ord_status):
        """Sets the bo_ord_status of this TradeDetailsData.


        :param bo_ord_status: The bo_ord_status of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._bo_ord_status = bo_ord_status

    @property
    def ord_id(self):
        """Gets the ord_id of this TradeDetailsData.  # noqa: E501


        :return: The ord_id of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._ord_id

    @ord_id.setter
    def ord_id(self, ord_id):
        """Sets the ord_id of this TradeDetailsData.


        :param ord_id: The ord_id of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._ord_id = ord_id

    @property
    def cancellable(self):
        """Gets the cancellable of this TradeDetailsData.  # noqa: E501


        :return: The cancellable of this TradeDetailsData.  # noqa: E501
        :rtype: bool
        """
        return self._cancellable

    @cancellable.setter
    def cancellable(self, cancellable):
        """Sets the cancellable of this TradeDetailsData.


        :param cancellable: The cancellable of this TradeDetailsData.  # noqa: E501
        :type: bool
        """

        self._cancellable = cancellable

    @property
    def exc_token(self):
        """Gets the exc_token of this TradeDetailsData.  # noqa: E501


        :return: The exc_token of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._exc_token

    @exc_token.setter
    def exc_token(self, exc_token):
        """Sets the exc_token of this TradeDetailsData.


        :param exc_token: The exc_token of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._exc_token = exc_token

    @property
    def option_type(self):
        """Gets the option_type of this TradeDetailsData.  # noqa: E501


        :return: The option_type of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._option_type

    @option_type.setter
    def option_type(self, option_type):
        """Sets the option_type of this TradeDetailsData.


        :param option_type: The option_type of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._option_type = option_type

    @property
    def exc(self):
        """Gets the exc of this TradeDetailsData.  # noqa: E501


        :return: The exc of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._exc

    @exc.setter
    def exc(self, exc):
        """Sets the exc of this TradeDetailsData.


        :param exc: The exc of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._exc = exc

    @property
    def ord_date(self):
        """Gets the ord_date of this TradeDetailsData.  # noqa: E501


        :return: The ord_date of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._ord_date

    @ord_date.setter
    def ord_date(self, ord_date):
        """Sets the ord_date of this TradeDetailsData.


        :param ord_date: The ord_date of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._ord_date = ord_date

    @property
    def prd_type(self):
        """Gets the prd_type of this TradeDetailsData.  # noqa: E501


        :return: The prd_type of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._prd_type

    @prd_type.setter
    def prd_type(self, prd_type):
        """Sets the prd_type of this TradeDetailsData.


        :param prd_type: The prd_type of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._prd_type = prd_type

    @property
    def modified_by(self):
        """Gets the modified_by of this TradeDetailsData.  # noqa: E501


        :return: The modified_by of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this TradeDetailsData.


        :param modified_by: The modified_by of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def base_sym(self):
        """Gets the base_sym of this TradeDetailsData.  # noqa: E501


        :return: The base_sym of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._base_sym

    @base_sym.setter
    def base_sym(self, base_sym):
        """Sets the base_sym of this TradeDetailsData.


        :param base_sym: The base_sym of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._base_sym = base_sym

    @property
    def expiry(self):
        """Gets the expiry of this TradeDetailsData.  # noqa: E501


        :return: The expiry of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this TradeDetailsData.


        :param expiry: The expiry of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._expiry = expiry

    @property
    def modifiable(self):
        """Gets the modifiable of this TradeDetailsData.  # noqa: E501


        :return: The modifiable of this TradeDetailsData.  # noqa: E501
        :rtype: bool
        """
        return self._modifiable

    @modifiable.setter
    def modifiable(self, modifiable):
        """Sets the modifiable of this TradeDetailsData.


        :param modifiable: The modifiable of this TradeDetailsData.  # noqa: E501
        :type: bool
        """

        self._modifiable = modifiable

    @property
    def ord_status(self):
        """Gets the ord_status of this TradeDetailsData.  # noqa: E501


        :return: The ord_status of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._ord_status

    @ord_status.setter
    def ord_status(self, ord_status):
        """Sets the ord_status of this TradeDetailsData.


        :param ord_status: The ord_status of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._ord_status = ord_status

    @property
    def disp_sym(self):
        """Gets the disp_sym of this TradeDetailsData.  # noqa: E501


        :return: The disp_sym of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._disp_sym

    @disp_sym.setter
    def disp_sym(self, disp_sym):
        """Sets the disp_sym of this TradeDetailsData.


        :param disp_sym: The disp_sym of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._disp_sym = disp_sym

    @property
    def ord_duration(self):
        """Gets the ord_duration of this TradeDetailsData.  # noqa: E501


        :return: The ord_duration of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._ord_duration

    @ord_duration.setter
    def ord_duration(self, ord_duration):
        """Sets the ord_duration of this TradeDetailsData.


        :param ord_duration: The ord_duration of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._ord_duration = ord_duration

    @property
    def child_type(self):
        """Gets the child_type of this TradeDetailsData.  # noqa: E501


        :return: The child_type of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._child_type

    @child_type.setter
    def child_type(self, child_type):
        """Sets the child_type of this TradeDetailsData.


        :param child_type: The child_type of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._child_type = child_type

    @property
    def instrument_type(self):
        """Gets the instrument_type of this TradeDetailsData.  # noqa: E501


        :return: The instrument_type of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this TradeDetailsData.


        :param instrument_type: The instrument_type of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._instrument_type = instrument_type

    @property
    def trigger_price(self):
        """Gets the trigger_price of this TradeDetailsData.  # noqa: E501


        :return: The trigger_price of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._trigger_price

    @trigger_price.setter
    def trigger_price(self, trigger_price):
        """Sets the trigger_price of this TradeDetailsData.


        :param trigger_price: The trigger_price of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._trigger_price = trigger_price

    @property
    def limit_price(self):
        """Gets the limit_price of this TradeDetailsData.  # noqa: E501


        :return: The limit_price of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this TradeDetailsData.


        :param limit_price: The limit_price of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._limit_price = limit_price

    @property
    def lot_size(self):
        """Gets the lot_size of this TradeDetailsData.  # noqa: E501


        :return: The lot_size of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._lot_size

    @lot_size.setter
    def lot_size(self, lot_size):
        """Sets the lot_size of this TradeDetailsData.


        :param lot_size: The lot_size of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._lot_size = lot_size

    @property
    def multipleir(self):
        """Gets the multipleir of this TradeDetailsData.  # noqa: E501


        :return: The multipleir of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._multipleir

    @multipleir.setter
    def multipleir(self, multipleir):
        """Sets the multipleir of this TradeDetailsData.


        :param multipleir: The multipleir of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._multipleir = multipleir

    @property
    def strike(self):
        """Gets the strike of this TradeDetailsData.  # noqa: E501


        :return: The strike of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this TradeDetailsData.


        :param strike: The strike of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._strike = strike

    @property
    def dis_qty(self):
        """Gets the dis_qty of this TradeDetailsData.  # noqa: E501


        :return: The dis_qty of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._dis_qty

    @dis_qty.setter
    def dis_qty(self, dis_qty):
        """Sets the dis_qty of this TradeDetailsData.


        :param dis_qty: The dis_qty of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._dis_qty = dis_qty

    @property
    def par_ord_id(self):
        """Gets the par_ord_id of this TradeDetailsData.  # noqa: E501


        :return: The par_ord_id of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._par_ord_id

    @par_ord_id.setter
    def par_ord_id(self, par_ord_id):
        """Sets the par_ord_id of this TradeDetailsData.


        :param par_ord_id: The par_ord_id of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._par_ord_id = par_ord_id

    @property
    def mkt_pro(self):
        """Gets the mkt_pro of this TradeDetailsData.  # noqa: E501


        :return: The mkt_pro of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._mkt_pro

    @mkt_pro.setter
    def mkt_pro(self, mkt_pro):
        """Sets the mkt_pro of this TradeDetailsData.


        :param mkt_pro: The mkt_pro of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._mkt_pro = mkt_pro

    @property
    def traded_qty(self):
        """Gets the traded_qty of this TradeDetailsData.  # noqa: E501


        :return: The traded_qty of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._traded_qty

    @traded_qty.setter
    def traded_qty(self, traded_qty):
        """Sets the traded_qty of this TradeDetailsData.


        :param traded_qty: The traded_qty of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._traded_qty = traded_qty

    @property
    def remain_qty(self):
        """Gets the remain_qty of this TradeDetailsData.  # noqa: E501


        :return: The remain_qty of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._remain_qty

    @remain_qty.setter
    def remain_qty(self, remain_qty):
        """Sets the remain_qty of this TradeDetailsData.


        :param remain_qty: The remain_qty of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._remain_qty = remain_qty

    @property
    def rej_reason(self):
        """Gets the rej_reason of this TradeDetailsData.  # noqa: E501


        :return: The rej_reason of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._rej_reason

    @rej_reason.setter
    def rej_reason(self, rej_reason):
        """Sets the rej_reason of this TradeDetailsData.


        :param rej_reason: The rej_reason of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._rej_reason = rej_reason

    @property
    def qty(self):
        """Gets the qty of this TradeDetailsData.  # noqa: E501


        :return: The qty of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this TradeDetailsData.


        :param qty: The qty of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._qty = qty

    @property
    def exch_ord_id(self):
        """Gets the exch_ord_id of this TradeDetailsData.  # noqa: E501


        :return: The exch_ord_id of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._exch_ord_id

    @exch_ord_id.setter
    def exch_ord_id(self, exch_ord_id):
        """Sets the exch_ord_id of this TradeDetailsData.


        :param exch_ord_id: The exch_ord_id of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._exch_ord_id = exch_ord_id

    @property
    def ord_type(self):
        """Gets the ord_type of this TradeDetailsData.  # noqa: E501


        :return: The ord_type of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._ord_type

    @ord_type.setter
    def ord_type(self, ord_type):
        """Sets the ord_type of this TradeDetailsData.


        :param ord_type: The ord_type of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._ord_type = ord_type

    @property
    def remarks(self):
        """Gets the remarks of this TradeDetailsData.  # noqa: E501


        :return: The remarks of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this TradeDetailsData.


        :param remarks: The remarks of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def tr_sym(self):
        """Gets the tr_sym of this TradeDetailsData.  # noqa: E501


        :return: The tr_sym of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._tr_sym

    @tr_sym.setter
    def tr_sym(self, tr_sym):
        """Sets the tr_sym of this TradeDetailsData.


        :param tr_sym: The tr_sym of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._tr_sym = tr_sym

    @property
    def status(self):
        """Gets the status of this TradeDetailsData.  # noqa: E501


        :return: The status of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TradeDetailsData.


        :param status: The status of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def traded_price(self):
        """Gets the traded_price of this TradeDetailsData.  # noqa: E501


        :return: The traded_price of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._traded_price

    @traded_price.setter
    def traded_price(self, traded_price):
        """Sets the traded_price of this TradeDetailsData.


        :param traded_price: The traded_price of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._traded_price = traded_price

    @property
    def exch_trd_id(self):
        """Gets the exch_trd_id of this TradeDetailsData.  # noqa: E501


        :return: The exch_trd_id of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._exch_trd_id

    @exch_trd_id.setter
    def exch_trd_id(self, exch_trd_id):
        """Sets the exch_trd_id of this TradeDetailsData.


        :param exch_trd_id: The exch_trd_id of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._exch_trd_id = exch_trd_id

    @property
    def trade_time(self):
        """Gets the trade_time of this TradeDetailsData.  # noqa: E501


        :return: The trade_time of this TradeDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._trade_time

    @trade_time.setter
    def trade_time(self, trade_time):
        """Sets the trade_time of this TradeDetailsData.


        :param trade_time: The trade_time of this TradeDetailsData.  # noqa: E501
        :type: str
        """

        self._trade_time = trade_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradeDetailsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradeDetailsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
