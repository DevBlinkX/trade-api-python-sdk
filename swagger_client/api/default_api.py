# coding: utf-8

"""
    Authentication API

    API for user authentication  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def login_normal_login_post(self, body, app_id):  # noqa: E501
        """User login  # noqa: E501

        :param LoginNormalLoginBody body: (required)
        :param str app_id: Application ID (required)
        :return: LoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        data = self.login_normal_login_post_with_http_info(body, app_id)  # noqa: E501
        return data

    def login_normal_login_post_with_http_info(self, body, app_id):  # noqa: E501
        """User login  # noqa: E501

        :param LoginNormalLoginBody body: (required)
        :param str app_id: Application ID (required)
        :return: LoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'app_id', 'async_req', '_return_http_data_only', '_preload_content',
                      '_request_timeout']  # noqa: E501

        params = locals()
        # for key, val in six.iteritems(params['kwargs']):
        #     if key not in all_params:
        #         raise TypeError(
        #             "Got an unexpected keyword argument '%s'"
        #             " to method login_normal_login_post" % key
        #         )
        #     params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError(
                "Missing the required parameter `body` when calling `login_normal_login_post`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError(
                "Missing the required parameter `app_id` when calling `login_normal_login_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'app_id' in params:
            header_params['appId'] = params['app_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/login/normal-login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoginResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
