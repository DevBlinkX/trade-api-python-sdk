# coding: utf-8

"""
    order-services Api Doc

    Rest APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sales@marketsimplified.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BrokerageChargeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'order_action': 'str',
        'exc_token': 'str',
        'exc': 'str',
        'qty': 'str',
        'price': 'str',
        'product': 'str',
        'trigger_price': 'str',
        'instrument': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'order_action': 'orderAction',
        'exc_token': 'excToken',
        'exc': 'exc',
        'qty': 'qty',
        'price': 'price',
        'product': 'product',
        'trigger_price': 'triggerPrice',
        'instrument': 'instrument'
    }

    def __init__(self, symbol=None, order_action=None, exc_token=None, exc=None, qty=None, price=None, product=None, trigger_price=None, instrument=None):  # noqa: E501
        """BrokerageChargeRequest - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._order_action = None
        self._exc_token = None
        self._exc = None
        self._qty = None
        self._price = None
        self._product = None
        self._trigger_price = None
        self._instrument = None
        self.discriminator = None
        self.symbol = symbol
        self.order_action = order_action
        self.exc_token = exc_token
        self.exc = exc
        self.qty = qty
        self.price = price
        self.product = product
        self.trigger_price = trigger_price
        if instrument is not None:
            self.instrument = instrument

    @property
    def symbol(self):
        """Gets the symbol of this BrokerageChargeRequest.  # noqa: E501


        :return: The symbol of this BrokerageChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this BrokerageChargeRequest.


        :param symbol: The symbol of this BrokerageChargeRequest.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def order_action(self):
        """Gets the order_action of this BrokerageChargeRequest.  # noqa: E501


        :return: The order_action of this BrokerageChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._order_action

    @order_action.setter
    def order_action(self, order_action):
        """Sets the order_action of this BrokerageChargeRequest.


        :param order_action: The order_action of this BrokerageChargeRequest.  # noqa: E501
        :type: str
        """
        if order_action is None:
            raise ValueError("Invalid value for `order_action`, must not be `None`")  # noqa: E501
        allowed_values = ["BUY", "SELL", "SHORT", "NONE"]  # noqa: E501
        if order_action not in allowed_values:
            raise ValueError(
                "Invalid value for `order_action` ({0}), must be one of {1}"  # noqa: E501
                .format(order_action, allowed_values)
            )

        self._order_action = order_action

    @property
    def exc_token(self):
        """Gets the exc_token of this BrokerageChargeRequest.  # noqa: E501


        :return: The exc_token of this BrokerageChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._exc_token

    @exc_token.setter
    def exc_token(self, exc_token):
        """Sets the exc_token of this BrokerageChargeRequest.


        :param exc_token: The exc_token of this BrokerageChargeRequest.  # noqa: E501
        :type: str
        """
        if exc_token is None:
            raise ValueError("Invalid value for `exc_token`, must not be `None`")  # noqa: E501

        self._exc_token = exc_token

    @property
    def exc(self):
        """Gets the exc of this BrokerageChargeRequest.  # noqa: E501


        :return: The exc of this BrokerageChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._exc

    @exc.setter
    def exc(self, exc):
        """Sets the exc of this BrokerageChargeRequest.


        :param exc: The exc of this BrokerageChargeRequest.  # noqa: E501
        :type: str
        """
        if exc is None:
            raise ValueError("Invalid value for `exc`, must not be `None`")  # noqa: E501
        allowed_values = ["NSE", "BSE", "NFO", "BFO", "CDS", "BCD", "MCXSX", "MCX", "NCO", "BCO", "ICEX"]  # noqa: E501
        if exc not in allowed_values:
            raise ValueError(
                "Invalid value for `exc` ({0}), must be one of {1}"  # noqa: E501
                .format(exc, allowed_values)
            )

        self._exc = exc

    @property
    def qty(self):
        """Gets the qty of this BrokerageChargeRequest.  # noqa: E501


        :return: The qty of this BrokerageChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this BrokerageChargeRequest.


        :param qty: The qty of this BrokerageChargeRequest.  # noqa: E501
        :type: str
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def price(self):
        """Gets the price of this BrokerageChargeRequest.  # noqa: E501


        :return: The price of this BrokerageChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BrokerageChargeRequest.


        :param price: The price of this BrokerageChargeRequest.  # noqa: E501
        :type: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def product(self):
        """Gets the product of this BrokerageChargeRequest.  # noqa: E501


        :return: The product of this BrokerageChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this BrokerageChargeRequest.


        :param product: The product of this BrokerageChargeRequest.  # noqa: E501
        :type: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501
        allowed_values = ["CASH", "MTF", "INTRADAY", "MARGIN", "SHORTSELL", "COVER_ORDER", "BRACKET_ORDER", "NRML", "TNC", "DELIVERY", "NONE"]  # noqa: E501
        if product not in allowed_values:
            raise ValueError(
                "Invalid value for `product` ({0}), must be one of {1}"  # noqa: E501
                .format(product, allowed_values)
            )

        self._product = product

    @property
    def trigger_price(self):
        """Gets the trigger_price of this BrokerageChargeRequest.  # noqa: E501


        :return: The trigger_price of this BrokerageChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._trigger_price

    @trigger_price.setter
    def trigger_price(self, trigger_price):
        """Sets the trigger_price of this BrokerageChargeRequest.


        :param trigger_price: The trigger_price of this BrokerageChargeRequest.  # noqa: E501
        :type: str
        """
        if trigger_price is None:
            raise ValueError("Invalid value for `trigger_price`, must not be `None`")  # noqa: E501

        self._trigger_price = trigger_price

    @property
    def instrument(self):
        """Gets the instrument of this BrokerageChargeRequest.  # noqa: E501


        :return: The instrument of this BrokerageChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this BrokerageChargeRequest.


        :param instrument: The instrument of this BrokerageChargeRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["STK", "ETF", "IDX", "COM", "UNDCUR", "CUR", "FUTIVX", "FUTSTK", "FUTIDX", "FUTCUR", "FUTIRD", "FUTIRC", "FUTIRT", "FUTIRF", "FUTCOM", "FUTBLN", "FUTENR", "FUTMET", "FUTAGR", "OPTIDX", "OPTSTK", "OPTCOM", "OPTBLN", "OPTENR", "OPTAGR", "OPTCUR", "OPTIRC", "OPTIRD", "UNDCOM", "AUCSO", "FUTIDXSPR", "FUTSTKSPR", "FUTCURSPR", "FUTIRTSPR", "FUTIRCSPR", "FUTIRDSPR", "OPTCURSPR", "OPTIRCSPR", "FUTCOMSPR", "OPTCOMSPR", "UNDIRC", "UNDIRD", "UNDIRT", "NONE"]  # noqa: E501
        if instrument not in allowed_values:
            raise ValueError(
                "Invalid value for `instrument` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument, allowed_values)
            )

        self._instrument = instrument

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrokerageChargeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrokerageChargeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
