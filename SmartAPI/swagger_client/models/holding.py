# coding: utf-8

"""
    portfolio-services Api Doc

    Rest APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sales@marketsimplified.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Holding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'SymbolDto',
        'ltp': 'float',
        'qty': 'int',
        'holding_qty': 'int',
        'used_qty': 'int',
        'btst': 'int',
        'pledge_qty': 'int',
        'prd_type': 'str',
        'avg_price': 'float',
        'invested': 'float',
        'market_value': 'float',
        'pnl_perc': 'float',
        'un_realized_pnl': 'float',
        'haircut': 'float',
        'pledgeable': 'bool',
        'close_price': 'float',
        'free_qty': 'int'
    }

    attribute_map = {
        'symbol': 'symbol',
        'ltp': 'ltp',
        'qty': 'qty',
        'holding_qty': 'holdingQty',
        'used_qty': 'usedQty',
        'btst': 'btst',
        'pledge_qty': 'pledgeQty',
        'prd_type': 'prdType',
        'avg_price': 'avgPrice',
        'invested': 'invested',
        'market_value': 'marketValue',
        'pnl_perc': 'pnlPerc',
        'un_realized_pnl': 'unRealizedPnl',
        'haircut': 'haircut',
        'pledgeable': 'pledgeable',
        'close_price': 'closePrice',
        'free_qty': 'freeQty'
    }

    def __init__(self, symbol=None, ltp=None, qty=None, holding_qty=None, used_qty=None, btst=None, pledge_qty=None, prd_type=None, avg_price=None, invested=None, market_value=None, pnl_perc=None, un_realized_pnl=None, haircut=None, pledgeable=None, close_price=None, free_qty=None):  # noqa: E501
        """Holding - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._ltp = None
        self._qty = None
        self._holding_qty = None
        self._used_qty = None
        self._btst = None
        self._pledge_qty = None
        self._prd_type = None
        self._avg_price = None
        self._invested = None
        self._market_value = None
        self._pnl_perc = None
        self._un_realized_pnl = None
        self._haircut = None
        self._pledgeable = None
        self._close_price = None
        self._free_qty = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if ltp is not None:
            self.ltp = ltp
        if qty is not None:
            self.qty = qty
        if holding_qty is not None:
            self.holding_qty = holding_qty
        if used_qty is not None:
            self.used_qty = used_qty
        if btst is not None:
            self.btst = btst
        if pledge_qty is not None:
            self.pledge_qty = pledge_qty
        if prd_type is not None:
            self.prd_type = prd_type
        if avg_price is not None:
            self.avg_price = avg_price
        if invested is not None:
            self.invested = invested
        if market_value is not None:
            self.market_value = market_value
        if pnl_perc is not None:
            self.pnl_perc = pnl_perc
        if un_realized_pnl is not None:
            self.un_realized_pnl = un_realized_pnl
        if haircut is not None:
            self.haircut = haircut
        if pledgeable is not None:
            self.pledgeable = pledgeable
        if close_price is not None:
            self.close_price = close_price
        if free_qty is not None:
            self.free_qty = free_qty

    @property
    def symbol(self):
        """Gets the symbol of this Holding.  # noqa: E501


        :return: The symbol of this Holding.  # noqa: E501
        :rtype: SymbolDto
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Holding.


        :param symbol: The symbol of this Holding.  # noqa: E501
        :type: SymbolDto
        """

        self._symbol = symbol

    @property
    def ltp(self):
        """Gets the ltp of this Holding.  # noqa: E501


        :return: The ltp of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._ltp

    @ltp.setter
    def ltp(self, ltp):
        """Sets the ltp of this Holding.


        :param ltp: The ltp of this Holding.  # noqa: E501
        :type: float
        """

        self._ltp = ltp

    @property
    def qty(self):
        """Gets the qty of this Holding.  # noqa: E501


        :return: The qty of this Holding.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this Holding.


        :param qty: The qty of this Holding.  # noqa: E501
        :type: int
        """

        self._qty = qty

    @property
    def holding_qty(self):
        """Gets the holding_qty of this Holding.  # noqa: E501


        :return: The holding_qty of this Holding.  # noqa: E501
        :rtype: int
        """
        return self._holding_qty

    @holding_qty.setter
    def holding_qty(self, holding_qty):
        """Sets the holding_qty of this Holding.


        :param holding_qty: The holding_qty of this Holding.  # noqa: E501
        :type: int
        """

        self._holding_qty = holding_qty

    @property
    def used_qty(self):
        """Gets the used_qty of this Holding.  # noqa: E501


        :return: The used_qty of this Holding.  # noqa: E501
        :rtype: int
        """
        return self._used_qty

    @used_qty.setter
    def used_qty(self, used_qty):
        """Sets the used_qty of this Holding.


        :param used_qty: The used_qty of this Holding.  # noqa: E501
        :type: int
        """

        self._used_qty = used_qty

    @property
    def btst(self):
        """Gets the btst of this Holding.  # noqa: E501


        :return: The btst of this Holding.  # noqa: E501
        :rtype: int
        """
        return self._btst

    @btst.setter
    def btst(self, btst):
        """Sets the btst of this Holding.


        :param btst: The btst of this Holding.  # noqa: E501
        :type: int
        """

        self._btst = btst

    @property
    def pledge_qty(self):
        """Gets the pledge_qty of this Holding.  # noqa: E501


        :return: The pledge_qty of this Holding.  # noqa: E501
        :rtype: int
        """
        return self._pledge_qty

    @pledge_qty.setter
    def pledge_qty(self, pledge_qty):
        """Sets the pledge_qty of this Holding.


        :param pledge_qty: The pledge_qty of this Holding.  # noqa: E501
        :type: int
        """

        self._pledge_qty = pledge_qty

    @property
    def prd_type(self):
        """Gets the prd_type of this Holding.  # noqa: E501


        :return: The prd_type of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._prd_type

    @prd_type.setter
    def prd_type(self, prd_type):
        """Sets the prd_type of this Holding.


        :param prd_type: The prd_type of this Holding.  # noqa: E501
        :type: str
        """
        allowed_values = ["CASH", "MTF", "INTRADAY", "MARGIN", "SHORTSELL", "COVER_ORDER", "BRACKET_ORDER", "NRML", "TNC", "DELIVERY", "NONE"]  # noqa: E501
        if prd_type not in allowed_values:
            raise ValueError(
                "Invalid value for `prd_type` ({0}), must be one of {1}"  # noqa: E501
                .format(prd_type, allowed_values)
            )

        self._prd_type = prd_type

    @property
    def avg_price(self):
        """Gets the avg_price of this Holding.  # noqa: E501


        :return: The avg_price of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price):
        """Sets the avg_price of this Holding.


        :param avg_price: The avg_price of this Holding.  # noqa: E501
        :type: float
        """

        self._avg_price = avg_price

    @property
    def invested(self):
        """Gets the invested of this Holding.  # noqa: E501


        :return: The invested of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._invested

    @invested.setter
    def invested(self, invested):
        """Sets the invested of this Holding.


        :param invested: The invested of this Holding.  # noqa: E501
        :type: float
        """

        self._invested = invested

    @property
    def market_value(self):
        """Gets the market_value of this Holding.  # noqa: E501


        :return: The market_value of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._market_value

    @market_value.setter
    def market_value(self, market_value):
        """Sets the market_value of this Holding.


        :param market_value: The market_value of this Holding.  # noqa: E501
        :type: float
        """

        self._market_value = market_value

    @property
    def pnl_perc(self):
        """Gets the pnl_perc of this Holding.  # noqa: E501


        :return: The pnl_perc of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._pnl_perc

    @pnl_perc.setter
    def pnl_perc(self, pnl_perc):
        """Sets the pnl_perc of this Holding.


        :param pnl_perc: The pnl_perc of this Holding.  # noqa: E501
        :type: float
        """

        self._pnl_perc = pnl_perc

    @property
    def un_realized_pnl(self):
        """Gets the un_realized_pnl of this Holding.  # noqa: E501


        :return: The un_realized_pnl of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._un_realized_pnl

    @un_realized_pnl.setter
    def un_realized_pnl(self, un_realized_pnl):
        """Sets the un_realized_pnl of this Holding.


        :param un_realized_pnl: The un_realized_pnl of this Holding.  # noqa: E501
        :type: float
        """

        self._un_realized_pnl = un_realized_pnl

    @property
    def haircut(self):
        """Gets the haircut of this Holding.  # noqa: E501


        :return: The haircut of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._haircut

    @haircut.setter
    def haircut(self, haircut):
        """Sets the haircut of this Holding.


        :param haircut: The haircut of this Holding.  # noqa: E501
        :type: float
        """

        self._haircut = haircut

    @property
    def pledgeable(self):
        """Gets the pledgeable of this Holding.  # noqa: E501


        :return: The pledgeable of this Holding.  # noqa: E501
        :rtype: bool
        """
        return self._pledgeable

    @pledgeable.setter
    def pledgeable(self, pledgeable):
        """Sets the pledgeable of this Holding.


        :param pledgeable: The pledgeable of this Holding.  # noqa: E501
        :type: bool
        """

        self._pledgeable = pledgeable

    @property
    def close_price(self):
        """Gets the close_price of this Holding.  # noqa: E501


        :return: The close_price of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._close_price

    @close_price.setter
    def close_price(self, close_price):
        """Sets the close_price of this Holding.


        :param close_price: The close_price of this Holding.  # noqa: E501
        :type: float
        """

        self._close_price = close_price

    @property
    def free_qty(self):
        """Gets the free_qty of this Holding.  # noqa: E501


        :return: The free_qty of this Holding.  # noqa: E501
        :rtype: int
        """
        return self._free_qty

    @free_qty.setter
    def free_qty(self, free_qty):
        """Sets the free_qty of this Holding.


        :param free_qty: The free_qty of this Holding.  # noqa: E501
        :type: int
        """

        self._free_qty = free_qty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Holding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Holding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
