# coding: utf-8

"""
    portfolio-services Api Doc

    Rest APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sales@marketsimplified.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pledge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trading_symbol': 'str',
        'exchange': 'str',
        'isin': 'str',
        'qty': 'int',
        'instrument': 'str'
    }

    attribute_map = {
        'trading_symbol': 'tradingSymbol',
        'exchange': 'exchange',
        'isin': 'isin',
        'qty': 'qty',
        'instrument': 'instrument'
    }

    def __init__(self, trading_symbol=None, exchange=None, isin=None, qty=None, instrument=None):  # noqa: E501
        """Pledge - a model defined in Swagger"""  # noqa: E501
        self._trading_symbol = None
        self._exchange = None
        self._isin = None
        self._qty = None
        self._instrument = None
        self.discriminator = None
        self.trading_symbol = trading_symbol
        self.exchange = exchange
        self.isin = isin
        self.qty = qty
        self.instrument = instrument

    @property
    def trading_symbol(self):
        """Gets the trading_symbol of this Pledge.  # noqa: E501


        :return: The trading_symbol of this Pledge.  # noqa: E501
        :rtype: str
        """
        return self._trading_symbol

    @trading_symbol.setter
    def trading_symbol(self, trading_symbol):
        """Sets the trading_symbol of this Pledge.


        :param trading_symbol: The trading_symbol of this Pledge.  # noqa: E501
        :type: str
        """
        if trading_symbol is None:
            raise ValueError("Invalid value for `trading_symbol`, must not be `None`")  # noqa: E501

        self._trading_symbol = trading_symbol

    @property
    def exchange(self):
        """Gets the exchange of this Pledge.  # noqa: E501


        :return: The exchange of this Pledge.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this Pledge.


        :param exchange: The exchange of this Pledge.  # noqa: E501
        :type: str
        """
        if exchange is None:
            raise ValueError("Invalid value for `exchange`, must not be `None`")  # noqa: E501
        allowed_values = ["NSE", "BSE", "NFO", "BFO", "CDS", "BCD", "MCXSX", "MCX", "NCO", "BCO", "ICEX"]  # noqa: E501
        if exchange not in allowed_values:
            raise ValueError(
                "Invalid value for `exchange` ({0}), must be one of {1}"  # noqa: E501
                .format(exchange, allowed_values)
            )

        self._exchange = exchange

    @property
    def isin(self):
        """Gets the isin of this Pledge.  # noqa: E501


        :return: The isin of this Pledge.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this Pledge.


        :param isin: The isin of this Pledge.  # noqa: E501
        :type: str
        """
        if isin is None:
            raise ValueError("Invalid value for `isin`, must not be `None`")  # noqa: E501

        self._isin = isin

    @property
    def qty(self):
        """Gets the qty of this Pledge.  # noqa: E501


        :return: The qty of this Pledge.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this Pledge.


        :param qty: The qty of this Pledge.  # noqa: E501
        :type: int
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def instrument(self):
        """Gets the instrument of this Pledge.  # noqa: E501


        :return: The instrument of this Pledge.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this Pledge.


        :param instrument: The instrument of this Pledge.  # noqa: E501
        :type: str
        """
        if instrument is None:
            raise ValueError("Invalid value for `instrument`, must not be `None`")  # noqa: E501
        allowed_values = ["STK", "ETF", "IDX", "COM", "UNDCUR", "CUR", "FUTIVX", "FUTSTK", "FUTIDX", "FUTCUR", "FUTIRD", "FUTIRC", "FUTIRT", "FUTIRF", "FUTCOM", "FUTBLN", "FUTENR", "FUTMET", "FUTAGR", "OPTIDX", "OPTSTK", "OPTCOM", "OPTBLN", "OPTENR", "OPTAGR", "OPTCUR", "OPTIRC", "OPTIRD", "UNDCOM", "AUCSO", "FUTIDXSPR", "FUTSTKSPR", "FUTCURSPR", "FUTIRTSPR", "FUTIRCSPR", "FUTIRDSPR", "OPTCURSPR", "OPTIRCSPR", "FUTCOMSPR", "OPTCOMSPR", "UNDIRC", "UNDIRD", "UNDIRT", "NONE"]  # noqa: E501
        if instrument not in allowed_values:
            raise ValueError(
                "Invalid value for `instrument` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument, allowed_values)
            )

        self._instrument = instrument

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pledge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pledge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
