# coding: utf-8

"""
    portfolio-services Api Doc

    Rest APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: sales@marketsimplified.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HoldingData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'todays_pnl': 'float',
        'invested': 'float',
        'un_realized_pnl': 'float',
        'market_value': 'float',
        'holdings': 'list[Holding]'
    }

    attribute_map = {
        'todays_pnl': 'todaysPnl',
        'invested': 'invested',
        'un_realized_pnl': 'unRealizedPnl',
        'market_value': 'marketValue',
        'holdings': 'holdings'
    }

    def __init__(self, todays_pnl=None, invested=None, un_realized_pnl=None, market_value=None, holdings=None):  # noqa: E501
        """HoldingData - a model defined in Swagger"""  # noqa: E501
        self._todays_pnl = None
        self._invested = None
        self._un_realized_pnl = None
        self._market_value = None
        self._holdings = None
        self.discriminator = None
        if todays_pnl is not None:
            self.todays_pnl = todays_pnl
        if invested is not None:
            self.invested = invested
        if un_realized_pnl is not None:
            self.un_realized_pnl = un_realized_pnl
        if market_value is not None:
            self.market_value = market_value
        if holdings is not None:
            self.holdings = holdings

    @property
    def todays_pnl(self):
        """Gets the todays_pnl of this HoldingData.  # noqa: E501


        :return: The todays_pnl of this HoldingData.  # noqa: E501
        :rtype: float
        """
        return self._todays_pnl

    @todays_pnl.setter
    def todays_pnl(self, todays_pnl):
        """Sets the todays_pnl of this HoldingData.


        :param todays_pnl: The todays_pnl of this HoldingData.  # noqa: E501
        :type: float
        """

        self._todays_pnl = todays_pnl

    @property
    def invested(self):
        """Gets the invested of this HoldingData.  # noqa: E501


        :return: The invested of this HoldingData.  # noqa: E501
        :rtype: float
        """
        return self._invested

    @invested.setter
    def invested(self, invested):
        """Sets the invested of this HoldingData.


        :param invested: The invested of this HoldingData.  # noqa: E501
        :type: float
        """

        self._invested = invested

    @property
    def un_realized_pnl(self):
        """Gets the un_realized_pnl of this HoldingData.  # noqa: E501


        :return: The un_realized_pnl of this HoldingData.  # noqa: E501
        :rtype: float
        """
        return self._un_realized_pnl

    @un_realized_pnl.setter
    def un_realized_pnl(self, un_realized_pnl):
        """Sets the un_realized_pnl of this HoldingData.


        :param un_realized_pnl: The un_realized_pnl of this HoldingData.  # noqa: E501
        :type: float
        """

        self._un_realized_pnl = un_realized_pnl

    @property
    def market_value(self):
        """Gets the market_value of this HoldingData.  # noqa: E501


        :return: The market_value of this HoldingData.  # noqa: E501
        :rtype: float
        """
        return self._market_value

    @market_value.setter
    def market_value(self, market_value):
        """Sets the market_value of this HoldingData.


        :param market_value: The market_value of this HoldingData.  # noqa: E501
        :type: float
        """

        self._market_value = market_value

    @property
    def holdings(self):
        """Gets the holdings of this HoldingData.  # noqa: E501


        :return: The holdings of this HoldingData.  # noqa: E501
        :rtype: list[Holding]
        """
        return self._holdings

    @holdings.setter
    def holdings(self, holdings):
        """Sets the holdings of this HoldingData.


        :param holdings: The holdings of this HoldingData.  # noqa: E501
        :type: list[Holding]
        """

        self._holdings = holdings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HoldingData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HoldingData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
